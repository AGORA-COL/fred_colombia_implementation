
##==============================================#
## Author: Guido Espana
## Modifed: Diego Veloza
## Simulate COVID-19 in BOGOTA
## Year: 2023
##==============================================#
## User's input----------------
##==============================================#
library(pomp)
library(lubridate)
library(tidyverse)
library(fredtools)
library(doParallel)
library(foreach)

####################################################
## Parallel setup for writting shelter timeseries
####################################################
# Num of cores. We leave one core
parallel::detectCores()
num_cores <- 25#parallel::detectCores() - 1

# Initialize parallel backend
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Load necessary packages within parallel workers
clusterEvalQ(cl, {
  library(dplyr)
  library(readr)
})          

# Chunk size for shelter timeseries processing. The lower the faster, however, the RAM consumption also increases. More than 20 seems good
chunk_size <- 30

####################################################
## local variables
####################################################
workers = c("pyky-w002.javeriana.edu.co",
            "pyky-w003.javeriana.edu.co",
            "pyky-w004.javeriana.edu.co")

#            "pyky-w004.javeriana.edu.co",

repo_name = 'fred_colombia_implementation'
AGORA_path = '/data_HPC02/agora'

worker_list <- paste(workers, collapse = '","')

####################################################
## FRED set cluster enviromental variables
####################################################
setwd(sprintf('%s/%s/fred_run_experiments/submit_simulations', AGORA_path, repo_name))
FRED_results_path = sprintf('%s/FRED_results', AGORA_path)

Sys.setenv(FRED_HOME=sprintf('%s/FRED', AGORA_path))
Sys.setenv(FRED_RESULTS=FRED_results_path)
Sys.setenv(scratch_dir=sprintf('%s/%s/scratch', AGORA_path, repo_name))
Sys.setenv(PATH=sprintf('/bin/:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin:%s/FRED/bin', AGORA_path))

##==============================================#
## load dirs -------------
##==============================================#
fred_home = Sys.getenv('FRED_HOME')
fred_defaults = sprintf("%s/input_files/defaults", fred_home)

##==============================================#
## Functions severity-------------------
##==============================================#
get_fred_dis_prog_params <- function(symp.df, ifr.df, dis_name){
    ##======================================#
    ## Recovery from symptoms ------------
    ##======================================#
    ## Recovery (I think this comes from Bi et al. Need to check 
    ## This first bit calculates the probabilty you have recovered by a certain day
    median = 20.8
    CI95 = 0.7
    n = 225 

    variance = n*(CI95/1.96)^2
    meanlog = log(median)
    sdlog = sqrt(log((1+sqrt(1+4*variance/exp(2*meanlog)))/2))

    recover.cdf = plnorm(seq(0,100,1),meanlog,sdlog)
    trunc.val = which(recover.cdf > 0.999)[1]
    rec.cdf = recover.cdf[1:trunc.val]/recover.cdf[trunc.val]

    ##======================================#
    ## isolation rate ------------
    ##======================================#
    ## Needs to be after recovery
    isolation.func <- function(p) {
        isolation.vec = c(0,(1-p)^seq(0,length(recover.cdf)-2,1))
        isolate.p = 1 - sum(isolation.vec*c(0,diff(recover.cdf)))
        return(abs(isolate.p - isolation.prob))
    }

    isolation.prob <- 0.68
    ## Using MMWR paper
    isolation.prob.daily <- optimize(
        interval = c(0,1),maximum = F,    
        f= isolation.func)$minimum

    ## Print daily isolation prob:
    isolation.prob.daily

    ## Check it matches the literature value
    isolation.vec = (1-isolation.prob.daily)^seq(0,100,1)
    1 - sum(isolation.vec*c(0,diff(recover.cdf)))

    isolation.fred.rate = isolation.prob.daily


    ##======================================#
    ## IFR ------------
    ##======================================#
    ##Death timing ##imperial lancet global health
    symp_to_death_mean = 17.8
    symp_to_death_mode = 14.5
    symp_to_death_rate = 1/(symp_to_death_mean-symp_to_death_mode)
    symp_to_death_shape = symp_to_death_mean*symp_to_death_rate
    rows <- findInterval(ifr.df$ages,symp.df$ages,left.open=TRUE)+1

    ifr.df$symp.probs <- symp.df$probs[rows]
    ifr.df$cfr.probs <- 0.01*ifr.df$probs/ifr.df$symp.probs

    cfr.vec = ifr.df$cfr.probs
    cfr = cfr.vec[length(cfr.vec)]
    days = 1:length(rec.cdf)-1
    rec.pdf = diff(rec.cdf)

    death.cdf = pgamma(days,symp_to_death_shape,symp_to_death_rate)
    death.cdf = cfr*death.cdf/death.cdf[length(death.cdf)]
    death.pdf = diff(death.cdf)

    ## calculate daily death probability
    fred.death.pdf = rep(0,length(days)-1)
    for (t in 1:(length(days)-1)){
        fred.death.pdf[t] = (death.pdf[t])/sum(rec.pdf[t:length(rec.pdf)])/prod(1-fred.death.pdf[0:(t-1)])
    }

    fred.death.pdf=pmax(pmin(fred.death.pdf,1),0)

    test.death.pdf = fred.death.pdf*cumprod(1-c(0,fred.death.pdf[-length(fred.death.pdf)]))*rev(cumsum(rev(rec.pdf)))

    ## check
    abs(death.pdf - test.death.pdf) < 1e-10

    ## get cfr multipliers
    cfr.multipliers <- cfr.vec/cfr
    for (i in 1:length(cfr.vec)) {
        cfr.mult.temp = cfr.multipliers[i]
        cfr.multipliers[i] = optim(par=cfr.mult.temp,
                                   fn=function(par){
                                       test.death.pdf = par*fred.death.pdf*cumprod(1-c(0,par*fred.death.pdf[-length(fred.death.pdf)]))*rev(cumsum(rev(rec.pdf)))
                                       return(abs(cfr.vec[i]-sum(test.death.pdf)))
                                   }, method="Brent",lower=0,upper=1
                                   )$par
    }

    ##======================================#
    ## Print to FRED format ------------
    ##======================================#
    days_symptomatic_str = sprintf("%s_days_symptomatic = %s",dis_name, paste(c(trunc.val,sprintf("%.9f",rec.cdf)), collapse = " "))

    case_fatality_values_str = sprintf("%s_case_fatality_values = %s", dis_name, paste(c(length(cfr.multipliers),sprintf("%.9f",cfr.multipliers)), collapse = " "))

    case_fatality_age_groups_str = sprintf("%s_case_fatality_age_groups = %s", dis_name, paste(c(nrow(ifr.df),sprintf("%.0f",ifr.df$ages)), collapse = " "))

    prob_symptoms_values_str = sprintf("%s_prob_symptoms_values = %s", dis_name, paste(c(nrow(symp.df),sprintf("%.9f",symp.df$probs)), collapse = " "))

    prob_symptoms_age_groups_str = sprintf("%s_prob_symptoms_age_groups = %s", dis_name,paste(c(nrow(symp.df),sprintf("%.0f",symp.df$ages)), collapse = " "))

    fred.death.pdf[length(fred.death.pdf)] = 1.0
    max.death.day = which(fred.death.pdf > 0.9)[1]
    if(max.death.day < length(fred.death.pdf)){
        ind_post_max = max.death.day:length(fred.death.pdf)    
        fred.death.pdf = fred.death.pdf[-ind_post_max[fred.death.pdf[ind_post_max] == 0]]
    }

    ## print the death pdf by day
    case_fatality_prob_by_day_str = sprintf("%s_case_fatality_prob_by_day = %s", dis_name, paste(c(length(fred.death.pdf),sprintf("%.9f",fred.death.pdf)), collapse = " "))

    fred_output_lines = c(
        days_symptomatic_str,
        prob_symptoms_age_groups_str,
        prob_symptoms_values_str,
        case_fatality_age_groups_str,        
        case_fatality_values_str,
        case_fatality_prob_by_day_str)
    
    return(fred_output_lines)
}

get_ifr_param_string <- function(severity_factor, var_name){
    davies.symp.df <- data.frame(
        ages=c(seq(10,70,10),120),
        probs=c(0.29, 0.21,0.27,0.33,0.4,0.49,0.63,0.69)) 
    verity.ifr.df <- data.frame(
        ages=c(9,19,29,39,49,59,69,79,120),
        probs=c(0.00161,0.00695,0.0309,0.0844,0.161,0.595,1.93,4.28,7.8))
    combined_params_df = data.frame(stringsAsFactors = FALSE)
    for(vv in 1:length(severity_factor)){
        variant.ifr.df = verity.ifr.df
        variant.ifr.df$probs =  100 * (1 - exp(-log(1/(1- 0.01*variant.ifr.df$probs)) * severity_factor[vv]))

        
        variant_params = get_fred_dis_prog_params(symp.df = davies.symp.df,
                                                  ifr.df = variant.ifr.df, dis_name = sprintf("variant%s",var_name))

        variant_params_df = lapply(str_split(variant_params, "[:space:]*=[:space:]*"), function(x){x[2]})
        names(variant_params_df) = lapply(str_split(variant_params, "[:space:]*=[:space:]*"), function(x){x[1]})
        combined_params_df = bind_rows(combined_params_df, as.data.frame(variant_params_df))
    }
    return(combined_params_df)
}
##==============================================#
## Custom functions-------------
##==============================================#
write_cmd_function <- function(scalars_in, tmpfile, output_path='../run_files'){
    ## Delte jobs!!!
    cat("Deleting jobs\n")
    if(dir.exists(file.path(Sys.getenv('FRED_RESULTS'),'JOB'))){
        for(s in 1:nrow(scalars_in)){
            system(sprintf("fred_delete -f -k %s",scalars_in$job_id[s]), intern = T)
        }
        cat("All jobs deleted\n")
    }else{
        cat("FRED RESULTS doesn't exist, nothing to delete",Sys.getenv('FRED_RESULTS'),"\n")
    }

    job_cmd_str = sprintf("fred_job -k %s -I %d -p %s -n %.0f -t 5; Rscript ./post_process_fred_calibration_var_%.0f.R %s %.0f",
                          scalars_in$job_id,
                          scalars_in$run_id,
                          scalars_in$params_file,
                          scalars_in$reps,
                          scalars_in$variants_in,
                          scalars_in$job_id,
                          scalars_in$reps
                          )

  print(scalars_in$variants_in)

  fileConn<-file(sprintf("%s/%s", output_path, tmpfile))
  writeLines(job_cmd_str, fileConn)
  print(sprintf("Job command written to %s/%s", output_path, tmpfile))
  close(fileConn)
}

##==============================================#
## Set STATE-------------------
##==============================================#
calibration_label                   = 'production'
state_code                          = 44
reps                                = 3000
reps_per_job                        = 1

fit_date                            = as.Date('2022-04-01')

second_peak_date                    = as.Date('2020-11-01')
third_peak_date                     = as.Date('2021-03-01')
fourth_peak_date                    = as.Date('2021-09-01')
after_fourth_peak_date              = as.Date('2022-01-01')

asymp_infectivity_in                = 1.0
face_mask_transmission_efficacy_in  = 0.73
kids_susceptibility_age_in          = 10
variants_in                         = 3.0
vaccination_in                      = 70
subm_jobs                           = FALSE
args                                = (commandArgs(TRUE))

if(length(args) >= 1){
    state_code = as.numeric(args[1])
    if(length(args) >= 2){
        reps = as.numeric(args[2])
        if(length(args) >= 3){
            reps_per_job = as.numeric(args[3])
            if(length(args) >= 4){
                fit_date = as.Date(args[4])
                if(length(args) >= 5){
                    asymp_infectivity_in = as.numeric(args[5])
                    if(length(args) >= 6){
                        face_mask_transmission_efficacy_in = as.numeric(args[6])
                        if(length(args) >= 7){
                            kids_susceptibility_age_in = as.numeric(args[7])
                            if(length(args) >= 8){
                                variants_in = as.numeric(args[8])
                                if(length(args) >= 9){
                                    vaccination_in = as.numeric(args[9])
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
##==============================================#
## Synthetic populations setup-------------
##==============================================#
populations_dir     = sprintf('%s/synthetic_populations/output/formatted_populations/colombia_%s', AGORA_path, state_code)

##==============================================#
## FRED setup-------------
##==============================================#
fred_home            = Sys.getenv('FRED_HOME')
fred_defaults        = sprintf("%s/input_files/defaults", fred_home)
experiment_label     = sprintf('FRED_%.d_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_var_%.2f_vax_%03d_mov_%s',state_code, asymp_infectivity_in, face_mask_transmission_efficacy_in, kids_susceptibility_age_in, variants_in, vaccination_in, calibration_label)
output.dir           = file.path(Sys.getenv('scratch_dir'),sprintf('FRED_%d_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_var_%.2f_vax_%03d_mov_%s',state_code, asymp_infectivity_in,face_mask_transmission_efficacy_in,kids_susceptibility_age_in, variants_in, vaccination_in, calibration_label))
print(output.dir)
#if(file.exists(output.dir)){
#    system(paste('rm -rf ', output.dir,sep = ''))
#}
system(paste('mkdir -p ', output.dir,sep = ''))


file.copy('../../scripts/post_process_fred_calibration_var_0.R',output.dir)
file.copy('../../scripts/post_process_fred_calibration_var_1.R',output.dir)
file.copy('../../scripts/post_process_fred_calibration_var_2.R',output.dir)
file.copy('../../scripts/post_process_fred_calibration_var_3.R',output.dir)
file.copy("../../fred_input_files/hospitalization/infection_hospitalization_risk.csv", output.dir)
file.copy("../../fred_input_files/hospitalization/infection_hospitalization_risk_5.csv", output.dir)
file.copy("../../fred_input_files/geoinfo_municipios_colombia.csv", output.dir)
# file.copy('../input_files/params_covid.txt','./input_files/params_covid.txt', overwrite = T)
# file.copy('../input_files/params_covid_variants.txt','./input_files/params_covid_variants.txt', overwrite = T)
# file.copy('../input_files/params_covid_alpha.txt','./input_files/params_covid_alpha.txt', overwrite = T)
# file.copy('../input_files/params_covid_gamma.txt','./input_files/params_covid_gamma.txt', overwrite = T)
# file.copy('../input_files/params_covid_kappa.txt','./input_files/params_covid_kappa.txt', overwrite = T)
# file.copy('../input_files/params_covid_delta.txt','./input_files/params_covid_delta.txt', overwrite = T)
# file.copy('../input_files/params_covid_vaccine.txt','./input_files/params_covid_vaccine.txt', overwrite = T)
# if(vaccination_in > 0){
#     file.copy(sprintf('../input_files/params_covid_vaccine_%d.txt', vaccination_in),sprintf('./input_files/params_covid_vaccine_%d.txt',vaccination_in), overwrite = T)
# }
# file.copy('../input_files/COL_hosp_duration_time.txt','./input_files/COL_hosp_duration_time.txt', overwrite = T)
# file.copy('../input_files/COL_covid_death_data.csv','./input_files/COL_covid_death_data.csv', overwrite = T)
# file.copy('../input_files/Age_COL_covid_data.csv','./input_files/Age_COL_covid_data.csv', overwrite = T)
# file.copy('../input_files/COL_variant_imports.csv','./input_files/COL_variant_imports.csv', overwrite = T)
# file.copy('../input_files/BOG_covid_death_data.csv','./input_files/BOG_covid_death_data.csv', overwrite = T)
# file.copy('../input_files/BOG_UCI_timeseries.csv','./input_files/BOG_UCI_timeseries.csv', overwrite = T)
# file.copy('../input_files/Age_BOG_covid_data.csv','./input_files/Age_BOG_covid_data.csv', overwrite = T)
# file.copy('../input_files/11001_mobility_trends.csv','./input_files/11001_mobility_trends.csv', overwrite = T)
# file.copy('../input_files/facemask_timeseries_compliance.csv','./input_files/facemask_timeseries_compliance.csv', overwrite = T)
# file.copy('../../input_files/Localidad_Unidad_Catastral.csv',output.dir, overwrite = T)
# file.copy('../input_files/Pars-variants.xlsx','./input_files/Pars-variants.xlsx', overwrite = T)

# file.copy(list.files(path='../input_files',pattern='11001_schools_open_gps.*.csv',full.names=T),'./input_files/', overwrite = T)

# import_files = list.files('../../input_files/','*imports*.csv', full.names = T)
# file.copy(import_files,'../../input_files/', overwrite = T)

##==============================================#
## Sweep fixed parameters-------------------
##==============================================#
start_date = '2020-01-01' # YYYY-MM-DD
numDays = as.numeric(fit_date - as.Date(start_date)) # We don't need many days yet
track_infection_events_in = 4 # No need to track infections in the calibrations right now
track_fatality_events_in = 1 
report_age_of_infection_in = 4 # Track individual ages of infections
report_incidence_by_county_in = 0 # We don't need this for the calibration either
report_place_of_infection_in = 1 # We might want to track place of infection
synthetic_population_id = sprintf('synthetic_population_id = colombia_%d', state_code)

isolation_rate = 0.05175 # Specific for the US
shelter_in_place_students = 0 # Don't shelter students, use school closure for that

advance_seeding = 'exposed'
school_vacation_end = as.Date('2021-01-25')
current_open_date = as.Date('2020-10-15')

## Shelter in place
interventions_st_df = read_csv('../../fred_input_files/interventions/interventions_Colombia.csv')
interventions_st_df$Shelter_in_place <- as.Date(interventions_st_df$Shelter_in_place, format="%m/%d/%y")
interventions_st_df$School_closure <- as.Date(interventions_st_df$School_closure, "%m/%d/%y")

enable_shelter_in_place = 1
enable_shelter_in_place_timeseries = 1
shelter_in_place_delay_mean = as.integer(interventions_st_df$Shelter_in_place[interventions_st_df$State == state_code] - as.Date(start_date))

## Facemask usage
enable_face_mask_timeseries_in = 1
enable_face_mask_usage_in = 1
min_age_face_masks_in = 8

## Age specific susceptibility
susceptibility_params = read_csv('../../fred_input_files/covid_data/age_susceptibility_fit.csv')
enable_age_specific_susceptibility_in = 1

## School closure policies
## School closure
early_school_vacation_end = as.Date('2021-01-25')
early_closure_duration = as.integer(early_school_vacation_end - interventions_st_df$School_closure[interventions_st_df$State == state_code])
early_school_reopening_day = as.numeric(early_school_vacation_end - as.Date(start_date))

school_closure_policy_in = 'global_schedule'
school_closure_day_in = as.integer(interventions_st_df$School_closure[interventions_st_df$State == state_code] - as.Date(start_date))
school_closure_duration_in = as.integer(school_vacation_end - interventions_st_df$School_closure[interventions_st_df$State == state_code])

## School parameters
## Reduced capacity
enable_school_reduced_capacity_in = 0
school_reduced_capacity_in = 0.35
school_reduced_capacity_day_in =  as.integer(early_school_vacation_end - as.Date(start_date))
school_student_teacher_ratio_in = 18

## Nursing home importations
gq_houses_file = sprintf('%s/colombia_%s_synth_gq.txt', populations_dir, state_code)
gq_houses = read_csv(gq_houses_file)

if(nrow(gq_houses) == 0){
    enable_nursing_homes_importations_in = 0
} else {
    enable_nursing_homes_importations_in = 1
}

## Contacts
neighborhood_contacts_in = 0.7883
workplace_contacts_in = 0.0686
office_contacts_in = 0.1372
household_contacts_in = 0.1402

## School contacts
school_contacts_in = 0.6295
classroom_contacts_in = 1.2590

## Holiday contacts
enable_community_contact_timeseries_in = 1
enable_holiday_contacts_in = 0
holiday_start_in = "11-16"
holiday_end_in = "01-07"

## Age bias
enable_transmission_bias_in = 1
neighborhood_same_age_bias_in = 0.1

##==============================================#
## PARAMETER SWEEP--------------
##==============================================#
## Parameters to calibrate!!!!
imports_factor                  = c(0.1, 1)
influenza_transmissibility      = c(0.3,1.5)
workplace_contact_factor_in     = c(0.2,1.1)
neighborhood_contact_factor_in  = c(0.1,1.1)
household_contact_factor_in     = c(0.1,1.1)

## First peak
shelter_in_place_compliance = c(0.8, 2.2)
facemask_compliance         = c(0.8, 1.7)
community_contact_rate_1_in = c(0.1, 1.1)

## Second peak
shelter_in_place_compliance_2 = c(1, 1)
facemask_compliance_2         = c(1, 1)
community_contact_rate_2_in   = c(1, 1)

## Fourth, fifth peak
shelter_in_place_compliance_3 = c(1, 1)
facemask_compliance_3         = c(1, 1)
community_contact_rate_3_in   = c(1, 1)

## After third peak
shelter_in_place_compliance_4 = c(1, 1)
facemask_compliance_4         = c(1, 1)
community_contact_rate_4_in   = c(1, 1)


## After third peak
shelter_in_place_compliance_5 = c(1, 1)
facemask_compliance_5         = c(1, 1)
community_contact_rate_5_in   = c(1, 1)


influenza_susceptibility_by_age_offset_in = susceptibility_params %>% filter(estimate != "mean") %>% pull(offset_low)
influenza_susceptibility_by_age_rate_in = susceptibility_params %>% filter(estimate != "mean") %>% pull(rate_in)
influenza_susceptibility_by_age_cutoff_in = susceptibility_params %>% filter(estimate != "mean") %>% pull(cutoff)
influenza_susceptibility_by_age_high_in =  susceptibility_params %>% filter(estimate != "mean") %>% pull(high)
nursing_home_incidence_importations_factor_in   = c(0.01, 0.15)
neighborhood_same_age_bias_in                   = c(0.01,0.1)
influenza_introduction_day_shift_in             = c(-45, 0)

   
## VARIANTS 
variantalpha_severity_factor_in = c(1.3,2.1)
variantalpha_transmissibility_factor_in = c(0,0)
variantalpha_cross_protection_prob_in = c(1,1)
variantalpha_introduction_day_in = c(as.numeric(as.Date('2021-03-10') - as.Date('2020-01-01')),as.numeric(as.Date('2021-02-14') - as.Date('2020-01-01')))
variantalpha_imports_factor_in = c(0.1,8)

variantgamma_severity_factor_in = c(1,2.5)
variantgamma_transmissibility_factor_in = c(0,0)
variantgamma_cross_protection_prob_in = c(1,1)
variantgamma_introduction_day_in = c(as.numeric(as.Date('2020-12-10') - as.Date('2020-01-01')),as.numeric(as.Date('2020-12-14') - as.Date('2020-01-01')))
variantgamma_imports_factor_in = c(0.1,8)

variantkappa_severity_factor_in = c(1,2.5)
variantkappa_transmissibility_factor_in = c(0,0)
variantkappa_cross_protection_prob_in = c(1,1)
variantkappa_introduction_day_in = c(-30, 0)
variantkappa_imports_factor_in = c(0.1,8)

variantdelta_severity_factor_in             = c(1, 1.5)
variantdelta_transmissibility_factor_in     = c(0, 0)
variantdelta_cross_protection_prob_in       = c(1, 1)
variantdelta_introduction_day_in            = c(as.numeric(as.Date('2021-07-08') - as.Date('2020-01-01')),as.numeric(as.Date('2021-07-09') - as.Date('2020-01-01')))
variantdelta_imports_factor_in              = c(0.1, 8)

variantomicron_introduction_day_shift_in    = c(-45, 0)
variantomicron_transmissibility_factor_in   = c(3.12, 3.38)
variantomicron_severity_factor_in           = c(0.56, 1.52)
variantomicron_cross_protection_prob_in     = c(0.173, 0.761)
variantomicron_introduction_day_in          = c(as.numeric(as.Date('2021-11-01') - as.Date('2020-01-01')),as.numeric(as.Date('2021-12-20') - as.Date('2020-01-01')))
variantomicron_imports_factor_in            = c(0.05, 1)

variantomicronBAX_transmissibility_factor_in   = c(3.25, 3.25)
variantomicronBAX_severity_factor_in           = c(1.40, 1.40)
variantomicronBAX_cross_protection_prob_in     = c(0.25, 0.25)
variantomicronBAX_introduction_day_in          = c(as.numeric(as.Date('2022-02-15') - as.Date('2020-01-01')),as.numeric(as.Date('2022-04-01') - as.Date('2020-01-01')))
variantomicronBAX_imports_factor_in            = c(0.5, 3)

if(variants_in >= 0.5){    
    shelter_in_place_compliance_2 = c(0.75, 2.5)
    facemask_compliance_2         = c(0.75, 2.5)
    community_contact_rate_2_in   = c(0.75, 2.5)
}

if(variants_in >= 1){    
    shelter_in_place_compliance_3           = c(0.75, 1.5)
    facemask_compliance_3                   = c(0.75, 1.5)
    community_contact_rate_3_in             = c(0.75, 1.5)

    variantalpha_severity_factor_in         = c(1.3,2.1)
    variantalpha_transmissibility_factor_in = c(1.1,1.5)
    variantalpha_cross_protection_prob_in   = c(0.91,0.91)
    variantalpha_introduction_day_in        = c(as.numeric(as.Date('2020-12-31') - as.Date('2020-01-01')),as.numeric(as.Date('2021-06-10') - as.Date('2020-01-01')))
    variantalpha_imports_factor_in          = c(0.05, 1)

    variantgamma_severity_factor_in         = c(0.90, 2.50)
    variantgamma_transmissibility_factor_in = c(1.26, 3.10)
    variantgamma_cross_protection_prob_in   = c(0.28,0.90)
    variantgamma_introduction_day_in        = c(as.numeric(as.Date('2020-11-04') - as.Date('2020-01-01')),as.numeric(as.Date('2021-06-24') - as.Date('2020-01-01')))
    variantgamma_imports_factor_in          = c(0.05, 1)

    variantkappa_severity_factor_in         = c(0.90, 2.50)
    variantkappa_transmissibility_factor_in = c(1.0,3.0)
    variantkappa_cross_protection_prob_in   = c(0.28,0.
    variantkappa_introduction_day_in        = c(-10, 0)
    variantkappa_imports_factor_in          = c(0.01, 0.65)
}

if(variants_in >= 2){    
    shelter_in_place_compliance_4           = c(0.5, 1.5)
    facemask_compliance_4                   = c(0.5, 1.5)
    community_contact_rate_4_in             = c(0.5, 1.5)

    variantdelta_severity_factor_in         = c(1.56, 3.4)
    variantdelta_cross_protection_prob_in   = c(0.5,  0.8) #0.2
    variantdelta_transmissibility_factor_in = c(1.5, 2.66) #1.5 1
    variantdelta_introduction_day_in        = c(as.numeric(as.Date('2021-06-08') - as.Date('2020-01-01')),as.numeric(as.Date('2021-06-09') - as.Date('2020-01-01')))
    variantdelta_imports_factor_in          = c(0.1, 1.0)
}

## Add Omicron variables
if(variants_in >= 3){    
    shelter_in_place_compliance_5           = c(0.5, 1.5)
    facemask_compliance_5                   = c(0.5, 1.5)
    community_contact_rate_5_in             = c(0.5, 1.5)

    variantomicron_introduction_day_shift_in    = c(-30, 5)
    variantomicron_transmissibility_factor_in   = c(1.25, 4.00) #c(3.12, 3.38)1.25
    variantomicron_severity_factor_in           = c(0.56, 1.52)
    variantomicron_cross_protection_prob_in     = c(0.1, 0.6) #c(0.1, 0.6)
    variantomicron_introduction_day_in          = c(as.numeric(as.Date('2021-11-01') - as.Date('2020-01-01')),as.numeric(as.Date('2021-12-20') - as.Date('2020-01-01')))
    variantomicron_imports_factor_in            = c(0.05, 0.8)
}

enable_age_specific_susceptibility_min_in = 0

influenza_susceptibility_by_age_minage_in = 10
influenza_susceptibility_by_age_minvalue_in = 1

## Read the susceptibility cutoff from an input
influenza_susceptibility_by_age_cutoff_in = c(kids_susceptibility_age_in, kids_susceptibility_age_in)

if(variants_in == 0){
    scalars_sobol_df = sobol_design(
        lower = c(seed=1,
                  influenza_introduction_day_shift              = influenza_introduction_day_shift_in[1],
                  imports_factor                                = imports_factor[1],
                  influenza_transmissibility                    = influenza_transmissibility[1],
                  shelter_in_place_compliance                   = shelter_in_place_compliance[1],
                  facemask_compliance                           = facemask_compliance[1],
                  influenza_susceptibility_by_age_offset        = influenza_susceptibility_by_age_offset_in[1],
                  influenza_susceptibility_by_age_rate          = influenza_susceptibility_by_age_rate_in[1],
                  influenza_susceptibility_by_age_cutoff        = influenza_susceptibility_by_age_cutoff_in[1],
                  influenza_susceptibility_by_age_high          = influenza_susceptibility_by_age_high_in[1],
                  nursing_home_incidence_importations_factor    = nursing_home_incidence_importations_factor_in[1],
                  neighborhood_same_age_bias                    = neighborhood_same_age_bias_in[1],
                  workplace_contact_factor                      = workplace_contact_factor_in[1],
                  neighborhood_contact_factor                   = neighborhood_contact_factor_in[1],
                  community_contact_rate_1                      = community_contact_rate_1_in[1]
                  ),
        upper = c(seed=as.integer(Sys.time()),
                  influenza_introduction_day_shift              = influenza_introduction_day_shift_in[2],
                  imports_factor                                = imports_factor[2],
                  influenza_transmissibility                    = influenza_transmissibility[2],
                  shelter_in_place_compliance                   = shelter_in_place_compliance[2],
                  facemask_compliance                           = facemask_compliance[2],
                  influenza_susceptibility_by_age_offset        = influenza_susceptibility_by_age_offset_in[2],
                  influenza_susceptibility_by_age_rate          = influenza_susceptibility_by_age_rate_in[2],
                  influenza_susceptibility_by_age_cutoff        = influenza_susceptibility_by_age_cutoff_in[2],
                  influenza_susceptibility_by_age_high          = influenza_susceptibility_by_age_high_in[2],
                  nursing_home_incidence_importations_factor    = nursing_home_incidence_importations_factor_in[2],
                  neighborhood_same_age_bias                    = neighborhood_same_age_bias_in[2],
                  workplace_contact_factor                      = workplace_contact_factor_in[2],
                  neighborhood_contact_factor                   = neighborhood_contact_factor_in[2],
                  community_contact_rate_1                      = community_contact_rate_1_in[2]
                  ),
        reps)
    scalars_sobol_df$variants_in                            = variants_in

    scalars_sobol_df$shelter_in_place_compliance_2          = shelter_in_place_compliance_2[1]
    scalars_sobol_df$facemask_compliance_2                  = facemask_compliance_2[1]
    scalars_sobol_df$community_contact_rate_2               = community_contact_rate_2_in[1]

    scalars_sobol_df$shelter_in_place_compliance_3          = shelter_in_place_compliance_3[1]
    scalars_sobol_df$facemask_compliance_3                  = facemask_compliance_3[1]
    scalars_sobol_df$community_contact_rate_3               = community_contact_rate_3_in[1]

    scalars_sobol_df$shelter_in_place_compliance_4          = shelter_in_place_compliance_4[1]
    scalars_sobol_df$facemask_compliance_4                  = facemask_compliance_4[1]
    scalars_sobol_df$community_contact_rate_4               = community_contact_rate_4_in[1]

    scalars_sobol_df$shelter_in_place_compliance_5          = shelter_in_place_compliance_5[1]
    scalars_sobol_df$facemask_compliance_5                  = facemask_compliance_5[1]
    scalars_sobol_df$community_contact_rate_5               = community_contact_rate_5_in[1]

    scalars_sobol_df$variantalpha_severity_factor           = variantalpha_severity_factor_in[1]
    scalars_sobol_df$variantalpha_transmissibility_factor   = variantalpha_transmissibility_factor_in[1]
    scalars_sobol_df$variantalpha_cross_protection_prob     = variantalpha_cross_protection_prob_in[1]
    scalars_sobol_df$variantalpha_introduction_day          = variantalpha_introduction_day_in[1]
    scalars_sobol_df$variantalpha_imports_factor            = variantalpha_imports_factor_in[1]

    scalars_sobol_df$variantgamma_transmissibility_factor   = variantgamma_transmissibility_factor_in[1]
    scalars_sobol_df$variantgamma_cross_protection_prob     = variantgamma_cross_protection_prob_in[1]
    scalars_sobol_df$variantgamma_introduction_day          = variantgamma_introduction_day_in[1]
    scalars_sobol_df$variantgamma_imports_factor            = variantgamma_imports_factor_in[1]
    scalars_sobol_df$variantgamma_severity_factor           = variantgamma_severity_factor_in[1]

    scalars_sobol_df$variantkappa_transmissibility_factor   = variantkappa_transmissibility_factor_in[1]
    scalars_sobol_df$variantkappa_cross_protection_prob     = variantkappa_cross_protection_prob_in[1]
    scalars_sobol_df$variantkappa_introduction_day          = variantkappa_introduction_day_in[1]
    scalars_sobol_df$variantkappa_introduction_day          = variantkappa_introduction_day_in[1]
    scalars_sobol_df$variantkappa_severity_factor           = variantkappa_severity_factor_in[1]
    scalars_sobol_df$variantkappa_imports_factor            = variantkappa_imports_factor_in[1]

    scalars_sobol_df$variantdelta_introduction_day          = variantdelta_introduction_day_in[1]
    scalars_sobol_df$variantdelta_transmissibility_factor   = mean(variantdelta_transmissibility_factor_in)
    scalars_sobol_df$variantdelta_cross_protection_prob     = mean(variantdelta_cross_protection_prob_in)
    scalars_sobol_df$variantdelta_imports_factor            = variantdelta_imports_factor_in[1]
    scalars_sobol_df$variantdelta_severity_factor           = variantdelta_severity_factor_in[1]

    scalars_sobol_df$variantomicron_introduction_day_shift   = variantomicron_introduction_day_shift_in[1]
    scalars_sobol_df$variantomicron_transmissibility_factor  = variantomicron_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicron_severity_factor          = variantomicron_severity_factor_in[1]
    scalars_sobol_df$variantomicron_cross_protection_prob    = variantomicron_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicron_introduction_day         = variantomicron_introduction_day_in[1]
    scalars_sobol_df$variantomicron_imports_factor           = variantomicron_imports_factor_in[1]
    
    scalars_sobol_df$variantomicronBAX_transmissibility_factor   = variantomicronBAX_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicronBAX_severity_factor           = variantomicronBAX_severity_factor_in[1]
    scalars_sobol_df$variantomicronBAX_cross_protection_prob     = variantomicronBAX_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicronBAX_introduction_day          = variantomicronBAX_introduction_day_in[1]
    scalars_sobol_df$variantomicronBAX_imports_factor            = variantomicronBAX_imports_factor_in[1]
}

if(variants_in == 0.5){  
    state_code_in = state_code
    calibration_simdir = sprintf('FRED_%.0f_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_var_%.2f_vax_%03d_mov_%s',
                                 state_code, 
                                 asymp_infectivity_in,
                                 face_mask_transmission_efficacy_in,
                                 kids_susceptibility_age_in, 
                                 0,
                                 vaccination_in,
                                 calibration_label)

    calibration_dir = file.path(getwd(), '../output','CALIBRATION',sprintf("%s_%s", calibration_simdir, "out"))
    params_df = read_csv(file.path(calibration_dir, 'FRED_parameters_out_selected.csv'))

    # Filter and prepare the data
    params_sweep_ll <- params_df %>%
        filter(state_code == state_code_in) %>%
        mutate(LL_total = if ("LL_CF_original" %in% names(params_df)) LL_CF_original else LL_deaths) %>%
        replace_na(list(LL_total = 0))


    # Define the total number of indices
    total_indices <- nrow(params_sweep_ll)
    indx_sampled <- sample.int(n = total_indices, size = reps, replace = TRUE)

    selected_jobs <- params_sweep_ll[indx_sampled, ] %>% pull(job_id)
    print(unique(selected_jobs))

    
    scalars_sampled = params_sweep_ll[indx_sampled,] %>%
        dplyr::select(imports_factor, influenza_introduction_day_shift,
                      influenza_transmissibility,
                      shelter_in_place_compliance, facemask_compliance,                  
                      influenza_susceptibility_by_age_offset,influenza_susceptibility_by_age_rate,
                      influenza_susceptibility_by_age_cutoff,influenza_susceptibility_by_age_high,
                      nursing_home_incidence_importations_factor,neighborhood_same_age_bias,
                      workplace_contacts, office_contacts, workplace_contact_factor,
                      neighborhood_contacts, neighborhood_contact_factor,holiday_contact_rate,
                      community_contact_rate_1,
                      school_contacts, classroom_contacts,school_contact_factor
                      ) 

    scalars_sobol_df = sobol_design(
        lower = c(seed=1,
                  shelter_in_place_compliance_2             = shelter_in_place_compliance_2[1],
                  facemask_compliance_2                     = facemask_compliance_2[1],
                  community_contact_rate_2                  = community_contact_rate_2_in[1]
                  ),
        upper = c(seed=as.integer(Sys.time()),                  
                  shelter_in_place_compliance_2             = shelter_in_place_compliance_2[2],
                  facemask_compliance_2                     = facemask_compliance_2[2],
                  community_contact_rate_2                  = community_contact_rate_2_in[2]
                  ),
        reps)

    scalars_sobol_df$variants_in                            = variants_in

    scalars_sobol_df$shelter_in_place_compliance_3          = shelter_in_place_compliance_3[1]
    scalars_sobol_df$facemask_compliance_3                  = facemask_compliance_3[1]
    scalars_sobol_df$community_contact_rate_3               = community_contact_rate_3_in[1]

    scalars_sobol_df$shelter_in_place_compliance_4          = shelter_in_place_compliance_4[1]
    scalars_sobol_df$facemask_compliance_4                  = facemask_compliance_4[1]
    scalars_sobol_df$community_contact_rate_4               = community_contact_rate_4_in[1]

    scalars_sobol_df$shelter_in_place_compliance_5          = shelter_in_place_compliance_5[1]
    scalars_sobol_df$facemask_compliance_5                  = facemask_compliance_5[1]
    scalars_sobol_df$community_contact_rate_5               = community_contact_rate_5_in[1]

    scalars_sobol_df$variantalpha_severity_factor           = variantalpha_severity_factor_in[1]
    scalars_sobol_df$variantalpha_transmissibility_factor   = variantalpha_transmissibility_factor_in[1]
    scalars_sobol_df$variantalpha_cross_protection_prob     = variantalpha_cross_protection_prob_in[1]
    scalars_sobol_df$variantalpha_introduction_day          = variantalpha_introduction_day_in[1]
    scalars_sobol_df$variantalpha_imports_factor            = variantalpha_imports_factor_in[1]

    scalars_sobol_df$variantgamma_transmissibility_factor   = variantgamma_transmissibility_factor_in[1]
    scalars_sobol_df$variantgamma_cross_protection_prob     = variantgamma_cross_protection_prob_in[1]
    scalars_sobol_df$variantgamma_introduction_day          = variantgamma_introduction_day_in[1]
    scalars_sobol_df$variantgamma_imports_factor            = variantgamma_imports_factor_in[1]
    scalars_sobol_df$variantgamma_severity_factor           = variantgamma_severity_factor_in[1]

    scalars_sobol_df$variantkappa_transmissibility_factor   = variantkappa_transmissibility_factor_in[1]
    scalars_sobol_df$variantkappa_cross_protection_prob     = variantkappa_cross_protection_prob_in[1]
    scalars_sobol_df$variantkappa_introduction_day          = variantkappa_introduction_day_in[1]
    scalars_sobol_df$variantkappa_introduction_day          = variantkappa_introduction_day_in[1]
    scalars_sobol_df$variantkappa_severity_factor           = variantkappa_severity_factor_in[1]
    scalars_sobol_df$variantkappa_imports_factor            = variantkappa_imports_factor_in[1]

    scalars_sobol_df$variantdelta_introduction_day          = variantdelta_introduction_day_in[1]
    scalars_sobol_df$variantdelta_transmissibility_factor   = mean(variantdelta_transmissibility_factor_in)
    scalars_sobol_df$variantdelta_cross_protection_prob     = mean(variantdelta_cross_protection_prob_in)
    scalars_sobol_df$variantdelta_imports_factor            = variantdelta_imports_factor_in[1]
    scalars_sobol_df$variantdelta_severity_factor           = variantdelta_severity_factor_in[1]

    scalars_sobol_df$variantomicron_introduction_day_shift   = variantomicron_introduction_day_shift_in[1]
    scalars_sobol_df$variantomicron_transmissibility_factor  = variantomicron_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicron_severity_factor          = variantomicron_severity_factor_in[1]
    scalars_sobol_df$variantomicron_cross_protection_prob    = variantomicron_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicron_introduction_day         = variantomicron_introduction_day_in[1]
    scalars_sobol_df$variantomicron_imports_factor           = variantomicron_imports_factor_in[1]
    
    scalars_sobol_df$variantomicronBAX_transmissibility_factor   = variantomicronBAX_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicronBAX_severity_factor           = variantomicronBAX_severity_factor_in[1]
    scalars_sobol_df$variantomicronBAX_cross_protection_prob     = variantomicronBAX_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicronBAX_introduction_day          = variantomicronBAX_introduction_day_in[1]
    scalars_sobol_df$variantomicronBAX_imports_factor            = variantomicronBAX_imports_factor_in[1]

    scalars_sobol_df = bind_cols(scalars_sobol_df, scalars_sampled)
}



if(variants_in == 1){  
    state_code_in = state_code
    calibration_simdir = sprintf('FRED_%.0f_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_var_%.2f_vax_%03d_mov_%s',
                                 state_code, 
                                 asymp_infectivity_in,
                                 face_mask_transmission_efficacy_in,
                                 kids_susceptibility_age_in, 
                                 0.5,
                                 vaccination_in,
                                 calibration_label)

    calibration_dir = file.path(getwd(), '../output','CALIBRATION',sprintf("%s_%s", calibration_simdir, "out"))
    params_df = read_csv(file.path(calibration_dir, 'FRED_parameters_out_selected.csv'))


    # Filter and prepare the data
    params_sweep_ll <- params_df %>%
        filter(state_code == state_code_in) %>%
        mutate(LL_total = if ("LL_CF_original" %in% names(params_df)) LL_CF_original else LL_deaths) %>%
        replace_na(list(LL_total = 0))

    # Define the total number of indices
    total_indices <- nrow(params_sweep_ll)
    indx_sampled <- sample.int(n = total_indices, size = reps, replace = TRUE)

    selected_jobs <- params_sweep_ll[indx_sampled, ] %>% pull(job_id)
    print(unique(selected_jobs))

    
    scalars_sampled = params_sweep_ll[indx_sampled,] %>%
        dplyr::select(imports_factor, influenza_introduction_day_shift,
                      influenza_transmissibility,
                      shelter_in_place_compliance, facemask_compliance,                  
                      influenza_susceptibility_by_age_offset,influenza_susceptibility_by_age_rate,
                      influenza_susceptibility_by_age_cutoff,influenza_susceptibility_by_age_high,
                      nursing_home_incidence_importations_factor,neighborhood_same_age_bias,
                      workplace_contacts, office_contacts, workplace_contact_factor,
                      neighborhood_contacts, neighborhood_contact_factor,holiday_contact_rate,
                      community_contact_rate_1,
                      school_contacts, classroom_contacts,school_contact_factor,

                      shelter_in_place_compliance_2,
                      facemask_compliance_2,
                      community_contact_rate_2 
                      ) 

    scalars_sobol_df = sobol_design(
        lower = c(seed=1,
                  variantalpha_severity_factor          = variantalpha_severity_factor_in[1],
                  variantalpha_transmissibility_factor  = variantalpha_transmissibility_factor_in[1],
                  variantalpha_cross_protection_prob    = variantalpha_cross_protection_prob_in[1],
                  variantalpha_imports_factor           = variantalpha_imports_factor_in[1],

                  variantgamma_transmissibility_factor  = variantgamma_transmissibility_factor_in[1],
                  variantgamma_severity_factor          = variantgamma_severity_factor_in[1],
                  variantgamma_cross_protection_prob    = variantgamma_cross_protection_prob_in[1],
                  variantgamma_imports_factor           = variantgamma_imports_factor_in[1],

                  variantkappa_introduction_day         = variantkappa_introduction_day_in[1],
                  variantkappa_transmissibility_factor  = variantkappa_transmissibility_factor_in[1],
                  variantkappa_severity_factor          = variantkappa_severity_factor_in[1],
                  variantkappa_cross_protection_prob    = variantkappa_cross_protection_prob_in[1],
                  variantkappa_imports_factor           = variantkappa_imports_factor_in[1],
            
                  shelter_in_place_compliance_3         = shelter_in_place_compliance_3[1],
                  facemask_compliance_3                 = facemask_compliance_3[1],
                  community_contact_rate_3              = community_contact_rate_3_in[1]
                  ),
        upper = c(seed=as.integer(Sys.time()),
                  variantalpha_severity_factor          = variantalpha_severity_factor_in[2],
                  variantalpha_transmissibility_factor  = variantalpha_transmissibility_factor_in[2],
                  variantalpha_cross_protection_prob    = variantalpha_cross_protection_prob_in[2],
                  variantalpha_imports_factor           = variantalpha_imports_factor_in[2],

                  variantgamma_transmissibility_factor  = variantgamma_transmissibility_factor_in[2],
                  variantgamma_severity_factor          = variantgamma_severity_factor_in[2],
                  variantgamma_cross_protection_prob    = variantgamma_cross_protection_prob_in[2],
                  variantgamma_imports_factor           = variantgamma_imports_factor_in[2],

                  variantkappa_introduction_day         = variantkappa_introduction_day_in[2],
                  variantkappa_transmissibility_factor  = variantkappa_transmissibility_factor_in[2],
                  variantkappa_severity_factor          = variantkappa_severity_factor_in[2],
                  variantkappa_cross_protection_prob    = variantkappa_cross_protection_prob_in[2],
                  variantkappa_imports_factor           = variantkappa_imports_factor_in[2],
            
                  shelter_in_place_compliance_3         = shelter_in_place_compliance_3[2],
                  facemask_compliance_3                 = facemask_compliance_3[2],
                  community_contact_rate_3              = community_contact_rate_3_in[2]
                ),
        reps)

    scalars_sobol_df$variants_in = variants_in

    scalars_sobol_df$shelter_in_place_compliance_4          = shelter_in_place_compliance_4[1]
    scalars_sobol_df$facemask_compliance_4                  = facemask_compliance_4[1]
    scalars_sobol_df$community_contact_rate_4               = community_contact_rate_4_in[1]

    scalars_sobol_df$shelter_in_place_compliance_5          = shelter_in_place_compliance_5[1]
    scalars_sobol_df$facemask_compliance_5                  = facemask_compliance_5[1]
    scalars_sobol_df$community_contact_rate_5               = community_contact_rate_5_in[1]

    scalars_sobol_df$variantdelta_introduction_day          = variantdelta_introduction_day_in[1]
    scalars_sobol_df$variantdelta_transmissibility_factor   = mean(variantdelta_transmissibility_factor_in)
    scalars_sobol_df$variantdelta_cross_protection_prob     = mean(variantdelta_cross_protection_prob_in)
    scalars_sobol_df$variantdelta_imports_factor            = variantdelta_imports_factor_in[1]
    scalars_sobol_df$variantdelta_severity_factor           = variantdelta_severity_factor_in[1]

    scalars_sobol_df$variantomicron_introduction_day_shift   = variantomicron_introduction_day_shift_in[1]
    scalars_sobol_df$variantomicron_transmissibility_factor  = variantomicron_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicron_severity_factor          = variantomicron_severity_factor_in[1]
    scalars_sobol_df$variantomicron_cross_protection_prob    = variantomicron_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicron_introduction_day         = variantomicron_introduction_day_in[1]
    scalars_sobol_df$variantomicron_imports_factor           = variantomicron_imports_factor_in[1]
    
    scalars_sobol_df$variantomicronBAX_transmissibility_factor   = variantomicronBAX_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicronBAX_severity_factor           = variantomicronBAX_severity_factor_in[1]
    scalars_sobol_df$variantomicronBAX_cross_protection_prob     = variantomicronBAX_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicronBAX_introduction_day          = variantomicronBAX_introduction_day_in[1]
    scalars_sobol_df$variantomicronBAX_imports_factor            = variantomicronBAX_imports_factor_in[1]

    scalars_sobol_df = bind_cols(scalars_sobol_df, scalars_sampled)
}

if(variants_in == 2){  
    state_code_in = state_code
    calibration_simdir = sprintf('FRED_%.0f_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_var_%.2f_vax_%03d_mov_%s',
                                 state_code, 
                                 asymp_infectivity_in,
                                 face_mask_transmission_efficacy_in,
                                 kids_susceptibility_age_in, 
                                 1,
                                 vaccination_in,
                                 calibration_label)

    calibration_dir = file.path(getwd(), '../output','CALIBRATION',sprintf("%s_%s", calibration_simdir, "out"))
    params_df = read_csv(file.path(calibration_dir, 'FRED_parameters_out_selected.csv'))
    #fred_sweep_df = read_csv(file.path(calibration_dir, 'fred_output.csv'))

    # Filter and prepare the data
    params_sweep_ll <- params_df %>%
        filter(state_code == state_code_in) %>%
        mutate(LL_total = if ("LL_CF_variants_1_2_3" %in% names(params_df)) LL_CF_variants_1_2_3 else LL_deaths) %>%
        replace_na(list(LL_total = 0))

    # Define the total number of indices
    total_indices <- nrow(params_sweep_ll)
    indx_sampled <- sample.int(n = total_indices, size = reps, replace = TRUE)

    selected_jobs <- params_sweep_ll[indx_sampled, ] %>% pull(job_id)
    print(unique(selected_jobs))

    scalars_sampled = params_sweep_ll[indx_sampled,] %>%
        dplyr::select(imports_factor, influenza_introduction_day_shift, 
                        influenza_transmissibility,
                        shelter_in_place_compliance, facemask_compliance,                  
                        influenza_susceptibility_by_age_offset,influenza_susceptibility_by_age_rate,
                        influenza_susceptibility_by_age_cutoff,influenza_susceptibility_by_age_high,

                        variantalpha_severity_factor,
                        variantalpha_imports_factor,
                        variantalpha_transmissibility_factor,
                        variantalpha_cross_protection_prob,

                        variantgamma_transmissibility_factor, 
                        variantgamma_imports_factor,
                        variantgamma_severity_factor,
                        variantgamma_cross_protection_prob,

                        variantkappa_transmissibility_factor,
                        variantkappa_imports_factor, 
                        variantkappa_severity_factor,
                        variantkappa_cross_protection_prob,
                        variantkappa_introduction_day, 

                        nursing_home_incidence_importations_factor,neighborhood_same_age_bias,
                        workplace_contacts, office_contacts, workplace_contact_factor,
                        neighborhood_contacts, neighborhood_contact_factor, holiday_contact_rate,
                        community_contact_rate_1,
                        school_contacts, classroom_contacts,school_contact_factor,

                        shelter_in_place_compliance_2,
                        facemask_compliance_2,
                        community_contact_rate_2,

                        shelter_in_place_compliance_3,
                        facemask_compliance_3,
                        community_contact_rate_3 
                      ) 


    scalars_sobol_df = sobol_design(
        lower = c(seed=1,
                variantdelta_cross_protection_prob    = variantdelta_cross_protection_prob_in[1],
                variantdelta_severity_factor          = variantdelta_severity_factor_in[1],
                variantdelta_transmissibility_factor  = variantdelta_transmissibility_factor_in[1],
                variantdelta_imports_factor           = variantdelta_imports_factor_in[1],
                shelter_in_place_compliance_4           = shelter_in_place_compliance_4[1],
                facemask_compliance_4                   = facemask_compliance_4[1],
                community_contact_rate_4                = community_contact_rate_4_in[1]
                ),
        upper = c(seed=as.integer(Sys.time()),
                variantdelta_cross_protection_prob    = variantdelta_cross_protection_prob_in[2],
                variantdelta_severity_factor          = variantdelta_severity_factor_in[2],
                variantdelta_transmissibility_factor  = variantdelta_transmissibility_factor_in[2],
                variantdelta_imports_factor           = variantdelta_imports_factor_in[2],
                shelter_in_place_compliance_4           = shelter_in_place_compliance_4[2],
                facemask_compliance_4                   = facemask_compliance_4[2],
                community_contact_rate_4                = community_contact_rate_4_in[2]
                ),
        reps)

    scalars_sobol_df$variants_in                            = variants_in
    
    scalars_sobol_df$shelter_in_place_compliance_5          = shelter_in_place_compliance_5[1]
    scalars_sobol_df$facemask_compliance_5                  = facemask_compliance_5[1]
    scalars_sobol_df$community_contact_rate_5               = community_contact_rate_5_in[1]

    scalars_sobol_df$variantomicron_introduction_day_shift   = variantomicron_introduction_day_shift_in[1]
    scalars_sobol_df$variantomicron_transmissibility_factor  = variantomicron_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicron_severity_factor          = variantomicron_severity_factor_in[1]
    scalars_sobol_df$variantomicron_cross_protection_prob    = variantomicron_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicron_introduction_day         = variantomicron_introduction_day_in[1]
    scalars_sobol_df$variantomicron_imports_factor           = variantomicron_imports_factor_in[1]
    
    scalars_sobol_df$variantomicronBAX_transmissibility_factor   = variantomicronBAX_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicronBAX_severity_factor           = variantomicronBAX_severity_factor_in[1]
    scalars_sobol_df$variantomicronBAX_cross_protection_prob     = variantomicronBAX_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicronBAX_introduction_day          = variantomicronBAX_introduction_day_in[1]
    scalars_sobol_df$variantomicronBAX_imports_factor            = variantomicronBAX_imports_factor_in[1]

    scalars_sobol_df = bind_cols(scalars_sobol_df, scalars_sampled)
}

if(variants_in == 3){  
    state_code_in = state_code
    calibration_simdir = sprintf('FRED_%.0f_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_var_%.2f_vax_%03d_mov_%s',
                                 state_code, 
                                 asymp_infectivity_in,
                                 face_mask_transmission_efficacy_in,
                                 kids_susceptibility_age_in, 
                                 2,
                                 vaccination_in,
                                 calibration_label)

    calibration_dir = file.path(getwd(), '../output','CALIBRATION',sprintf("%s_%s", calibration_simdir, "out"))
    params_df = read_csv(file.path(calibration_dir, 'FRED_parameters_out_selected.csv'))
    #fred_sweep_df = read_csv(file.path(calibration_dir, 'fred_output.csv'))

    # Filter and prepare the data
    params_sweep_ll <- params_df %>%
        filter(state_code == state_code_in) %>%
        mutate(LL_total = if ("LL_CF_variant_4" %in% names(params_df)) LL_CF_variant_4 else LL_deaths) %>%
        replace_na(list(LL_total = 0))

    # Define the total number of indices
    total_indices <- nrow(params_sweep_ll)
    indx_sampled <- sample.int(n = total_indices, size = reps, replace = TRUE)

    selected_jobs <- params_sweep_ll[indx_sampled, ] %>% pull(job_id)
    print(unique(selected_jobs))

    scalars_sampled = params_sweep_ll[indx_sampled,] %>%
        dplyr::select(imports_factor, influenza_introduction_day_shift, 
                        influenza_transmissibility,
                        shelter_in_place_compliance, facemask_compliance,                  
                        influenza_susceptibility_by_age_offset,influenza_susceptibility_by_age_rate,
                        influenza_susceptibility_by_age_cutoff,influenza_susceptibility_by_age_high,

                        variantalpha_severity_factor,
                        variantalpha_imports_factor,
                        variantalpha_transmissibility_factor,
                        variantalpha_cross_protection_prob,

                        variantgamma_transmissibility_factor, 
                        variantgamma_imports_factor,
                        variantgamma_severity_factor,
                        variantgamma_cross_protection_prob,

                        variantkappa_transmissibility_factor,
                        variantkappa_imports_factor, 
                        variantkappa_severity_factor,
                        variantkappa_cross_protection_prob,
                        variantkappa_introduction_day, 

                        variantdelta_cross_protection_prob ,
                        variantdelta_severity_factor,
                        variantdelta_transmissibility_factor,
                        variantdelta_imports_factor,

                        nursing_home_incidence_importations_factor,neighborhood_same_age_bias,
                        workplace_contacts, office_contacts, workplace_contact_factor,
                        neighborhood_contacts, neighborhood_contact_factor, holiday_contact_rate,
                        community_contact_rate_1,
                        school_contacts, classroom_contacts,school_contact_factor,

                        shelter_in_place_compliance_2,
                        facemask_compliance_2,
                        community_contact_rate_2,

                        shelter_in_place_compliance_3,
                        facemask_compliance_3,
                        community_contact_rate_3,
                    
                        shelter_in_place_compliance_4,
                        facemask_compliance_4,
                        community_contact_rate_4
                      ) 


    scalars_sobol_df = sobol_design(
        lower = c(seed=1,

                variantomicron_introduction_day_shift   = variantomicron_introduction_day_shift_in[1],
                variantomicron_transmissibility_factor  = variantomicron_transmissibility_factor_in[1],
                variantomicron_severity_factor          = variantomicron_severity_factor_in[1],
                variantomicron_cross_protection_prob    = variantomicron_cross_protection_prob_in[1],
                variantomicron_introduction_day         = variantomicron_introduction_day_in[1],
                variantomicron_imports_factor           = variantomicron_imports_factor_in[1],
            
                shelter_in_place_compliance_5           = shelter_in_place_compliance_5[1],
                facemask_compliance_5                   = facemask_compliance_5[1],
                community_contact_rate_5                = community_contact_rate_5_in[1]
                
                ),
        upper = c(seed=as.integer(Sys.time()),

                variantomicron_introduction_day_shift   = variantomicron_introduction_day_shift_in[2],
                variantomicron_transmissibility_factor  = variantomicron_transmissibility_factor_in[2],
                variantomicron_severity_factor          = variantomicron_severity_factor_in[2],
                variantomicron_cross_protection_prob    = variantomicron_cross_protection_prob_in[2],
                variantomicron_introduction_day         = variantomicron_introduction_day_in[2],
                variantomicron_imports_factor           = variantomicron_imports_factor_in[2],

                shelter_in_place_compliance_5           = shelter_in_place_compliance_5[2],
                facemask_compliance_5                   = facemask_compliance_5[2],
                community_contact_rate_5                = community_contact_rate_5_in[2]

                ),
        reps)

    scalars_sobol_df$variants_in                            = variants_in
    
    scalars_sobol_df$variantomicronBAX_transmissibility_factor   = variantomicronBAX_transmissibility_factor_in[1]
    scalars_sobol_df$variantomicronBAX_severity_factor           = variantomicronBAX_severity_factor_in[1]
    scalars_sobol_df$variantomicronBAX_cross_protection_prob     = variantomicronBAX_cross_protection_prob_in[1]
    scalars_sobol_df$variantomicronBAX_introduction_day          = variantomicronBAX_introduction_day_in[1]
    scalars_sobol_df$variantomicronBAX_imports_factor            = variantomicronBAX_imports_factor_in[1]

    scalars_sobol_df = bind_cols(scalars_sobol_df, scalars_sampled)
}


scalars_sobol_df$variantalpha_transmissibility =  scalars_sobol_df$influenza_transmissibility * scalars_sobol_df$variantalpha_transmissibility_factor
scalars_sobol_df$variantkappa_transmissibility =  scalars_sobol_df$influenza_transmissibility * scalars_sobol_df$variantkappa_transmissibility_factor
scalars_sobol_df$variantgamma_transmissibility =  scalars_sobol_df$influenza_transmissibility * scalars_sobol_df$variantgamma_transmissibility_factor
scalars_sobol_df$variantdelta_transmissibility =  scalars_sobol_df$influenza_transmissibility * scalars_sobol_df$variantdelta_transmissibility_factor   
scalars_sobol_df$variantomicron_transmissibility =  scalars_sobol_df$variantdelta_transmissibility * scalars_sobol_df$variantomicron_transmissibility_factor 
#scalars_sobol_df$variantomicronBAX_transmissibility =  scalars_sobol_df$variantdelta_transmissibility * scalars_sobol_df$variantomicronBAX_transmissibility_factor  

scalars_sobol_df$variantalpha_susceptibility_by_age_offset  = scalars_sobol_df$influenza_susceptibility_by_age_offset 
scalars_sobol_df$variantalpha_susceptibility_by_age_rate    = scalars_sobol_df$influenza_susceptibility_by_age_rate 
scalars_sobol_df$variantalpha_susceptibility_by_age_cutoff  = scalars_sobol_df$influenza_susceptibility_by_age_cutoff
scalars_sobol_df$variantalpha_susceptibility_by_age_high    = scalars_sobol_df$influenza_susceptibility_by_age_high

scalars_sobol_df$variantkappa_susceptibility_by_age_offset  = scalars_sobol_df$influenza_susceptibility_by_age_offset 
scalars_sobol_df$variantkappa_susceptibility_by_age_rate    = scalars_sobol_df$influenza_susceptibility_by_age_rate 
scalars_sobol_df$variantkappa_susceptibility_by_age_cutoff  = scalars_sobol_df$influenza_susceptibility_by_age_cutoff
scalars_sobol_df$variantkappa_susceptibility_by_age_high    = scalars_sobol_df$influenza_susceptibility_by_age_high

scalars_sobol_df$variantgamma_susceptibility_by_age_offset  = scalars_sobol_df$influenza_susceptibility_by_age_offset 
scalars_sobol_df$variantgamma_susceptibility_by_age_rate    = scalars_sobol_df$influenza_susceptibility_by_age_rate 
scalars_sobol_df$variantgamma_susceptibility_by_age_cutoff  = scalars_sobol_df$influenza_susceptibility_by_age_cutoff
scalars_sobol_df$variantgamma_susceptibility_by_age_high    = scalars_sobol_df$influenza_susceptibility_by_age_high

scalars_sobol_df$variantdelta_susceptibility_by_age_offset  = scalars_sobol_df$influenza_susceptibility_by_age_offset 
scalars_sobol_df$variantdelta_susceptibility_by_age_rate    = scalars_sobol_df$influenza_susceptibility_by_age_rate 
scalars_sobol_df$variantdelta_susceptibility_by_age_cutoff  = scalars_sobol_df$influenza_susceptibility_by_age_cutoff
scalars_sobol_df$variantdelta_susceptibility_by_age_high    = scalars_sobol_df$influenza_susceptibility_by_age_high

scalars_sobol_df$variantomicron_susceptibility_by_age_offset  = scalars_sobol_df$influenza_susceptibility_by_age_offset 
scalars_sobol_df$variantomicron_susceptibility_by_age_rate    = scalars_sobol_df$influenza_susceptibility_by_age_rate 
scalars_sobol_df$variantomicron_susceptibility_by_age_cutoff  = scalars_sobol_df$influenza_susceptibility_by_age_cutoff
scalars_sobol_df$variantomicron_susceptibility_by_age_high    = scalars_sobol_df$influenza_susceptibility_by_age_high

# scalars_sobol_df$variantomicronBAX_susceptibility_by_age_offset  = scalars_sobol_df$influenza_susceptibility_by_age_offset 
# scalars_sobol_df$variantomicronBAX_susceptibility_by_age_rate    = scalars_sobol_df$influenza_susceptibility_by_age_rate 
# scalars_sobol_df$variantomicronBAX_susceptibility_by_age_cutoff  = scalars_sobol_df$influenza_susceptibility_by_age_cutoff
# scalars_sobol_df$variantomicronBAX_susceptibility_by_age_high    = scalars_sobol_df$influenza_susceptibility_by_age_high

scalars_sobol_df$school_contact_factor  = 1.0
scalars_sobol_df$holiday_contact_rate   = 1.0

scalars_sobol_df = bind_cols(scalars_sobol_df, get_ifr_param_string(scalars_sobol_df$variantalpha_severity_factor, 'alpha'))
scalars_sobol_df = bind_cols(scalars_sobol_df, get_ifr_param_string(scalars_sobol_df$variantgamma_severity_factor, 'gamma'))
scalars_sobol_df = bind_cols(scalars_sobol_df, get_ifr_param_string(scalars_sobol_df$variantkappa_severity_factor, 'kappa'))
scalars_sobol_df = bind_cols(scalars_sobol_df, get_ifr_param_string(scalars_sobol_df$variantdelta_severity_factor, 'delta'))
scalars_sobol_df = bind_cols(scalars_sobol_df, get_ifr_param_string(scalars_sobol_df$variantomicron_severity_factor, 'omicron'))
#scalars_sobol_df = bind_cols(scalars_sobol_df, get_ifr_param_string(scalars_sobol_df$variantomicronBAX_severity_factor, 'omicronBAX'))

## get_ifr_param_string(scalars_sobol_df$variantdelta_severity_factor[4], 'delta')


parameters <- c('workplace_contact_factor',
                'neighborhood_contact_factor', 
                'community_contact_rate_1',
                'community_contact_rate_2',
                'community_contact_rate_3', 
                'community_contact_rate_4',
                'community_contact_rate_5',
                'shelter_in_place_compliance',
                'shelter_in_place_compliance_2',
                'shelter_in_place_compliance_3',
                'shelter_in_place_compliance_4', 
                'shelter_in_place_compliance_5',
                'influenza_transmissibility',
                'facemask_compliance',
                'facemask_compliance_2',
                'facemask_compliance_3',
                'facemask_compliance_4',
                'facemask_compliance_5',
                'imports_factor',
                'influenza_introduction_day_shift',
                'influenza_susceptibility_by_age_offset',
                'influenza_susceptibility_by_age_rate',
                'influenza_susceptibility_by_age_cutoff',
                'influenza_susceptibility_by_age_high',
                'nursing_home_incidence_importations_factor',
                'neighborhood_same_age_bias',
                'variantalpha_cross_protection_prob',
                'variantgamma_cross_protection_prob', 
                'variantkappa_cross_protection_prob',
                'variantdelta_cross_protection_prob',
                'variantomicron_cross_protection_prob',
                'variantalpha_imports_factor',
                'variantgamma_imports_factor', 
                'variantkappa_imports_factor', 
                'variantdelta_imports_factor',
                'variantomicron_imports_factor',
                'variantalpha_transmissibility_factor',
                'variantgamma_transmissibility_factor',
                'variantkappa_transmissibility_factor',
                'variantdelta_transmissibility_factor', 
                'variantomicron_transmissibility_factor',
                'variantalpha_severity_factor',
                'variantgamma_severity_factor',
                'variantkappa_severity_factor',
                'variantdelta_severity_factor',
                'variantomicron_severity_factor',
                'variantkappa_introduction_day',
                'variantomicron_introduction_day_shift')

lower_limit <- c(workplace_contact_factor_in[1],
                neighborhood_contact_factor_in[1],
                community_contact_rate_1_in[1],
                community_contact_rate_2_in[1],
                community_contact_rate_3_in[1],
                community_contact_rate_4_in[1],
                community_contact_rate_5_in[1],
                shelter_in_place_compliance[1],
                shelter_in_place_compliance_2[1],
                shelter_in_place_compliance_3[1], 
                shelter_in_place_compliance_4[1],
                shelter_in_place_compliance_5[1],
                influenza_transmissibility[1],
                facemask_compliance[1],
                facemask_compliance_2[1],
                facemask_compliance_3[1],
                facemask_compliance_4[1],
                facemask_compliance_5[1],
                imports_factor[1],
                influenza_introduction_day_shift_in[1],
                influenza_susceptibility_by_age_offset_in[1],
                influenza_susceptibility_by_age_rate_in[1],
                influenza_susceptibility_by_age_cutoff_in[1],
                influenza_susceptibility_by_age_high_in[1],
                nursing_home_incidence_importations_factor_in[1],
                neighborhood_same_age_bias_in[1],
                variantalpha_cross_protection_prob_in[1],
                variantgamma_cross_protection_prob_in[1],
                variantkappa_cross_protection_prob_in[1],
                variantdelta_cross_protection_prob_in[1],
                variantomicron_cross_protection_prob_in[1],
                variantalpha_imports_factor_in[1],
                variantgamma_imports_factor_in[1],
                variantkappa_imports_factor_in[1],
                variantdelta_imports_factor_in[1],
                variantomicron_imports_factor_in[1],
                variantalpha_transmissibility_factor_in[1],
                variantgamma_transmissibility_factor_in[1],
                variantkappa_transmissibility_factor_in[1],
                variantdelta_transmissibility_factor_in[1],
                variantomicron_transmissibility_factor_in[1],
                variantalpha_severity_factor_in[1],
                variantgamma_severity_factor_in[1],
                variantkappa_severity_factor_in[1],
                variantdelta_severity_factor_in[1],
                variantomicron_severity_factor_in[1],
                variantkappa_introduction_day_in[1],
                variantomicron_introduction_day_shift_in[1])

upper_limit <- c(workplace_contact_factor_in[2],
                neighborhood_contact_factor_in[2],
                community_contact_rate_1_in[2],
                community_contact_rate_2_in[2],
                community_contact_rate_3_in[2],
                community_contact_rate_4_in[2],
                community_contact_rate_5_in[2],
                shelter_in_place_compliance[2],
                shelter_in_place_compliance_2[2],
                shelter_in_place_compliance_3[2],
                shelter_in_place_compliance_4[2],
                shelter_in_place_compliance_5[2],
                influenza_transmissibility[2],
                facemask_compliance[2],
                facemask_compliance_2[2],
                facemask_compliance_3[2],
                facemask_compliance_4[2],
                facemask_compliance_5[2],
                imports_factor[2],
                influenza_introduction_day_shift_in[2],
                influenza_susceptibility_by_age_offset_in[2],
                influenza_susceptibility_by_age_rate_in[2], 
                influenza_susceptibility_by_age_cutoff_in[2],
                influenza_susceptibility_by_age_high_in[2],
                nursing_home_incidence_importations_factor_in[2],
                neighborhood_same_age_bias_in[2],
                variantalpha_cross_protection_prob_in[2],
                variantgamma_cross_protection_prob_in[2],
                variantkappa_cross_protection_prob_in[2],
                variantdelta_cross_protection_prob_in[2],
                variantomicron_cross_protection_prob_in[2],
                variantalpha_imports_factor_in[2],
                variantgamma_imports_factor_in[2],
                variantkappa_imports_factor_in[2],
                variantdelta_imports_factor_in[2],
                variantomicron_imports_factor_in[2],
                variantalpha_transmissibility_factor_in[2],
                variantgamma_transmissibility_factor_in[2],
                variantkappa_transmissibility_factor_in[2],
                variantdelta_transmissibility_factor_in[2],
                variantomicron_transmissibility_factor_in[2],
                variantalpha_severity_factor_in[2],
                variantgamma_severity_factor_in[2],
                variantkappa_severity_factor_in[2],
                variantdelta_severity_factor_in[2],
                variantomicron_severity_factor_in[2],
                variantkappa_introduction_day_in[2],
                variantomicron_introduction_day_shift_in[2])


# Function to save vectors limits to a CSV file
save_limits_to_csv <- function() {
  limits <- data.frame(
    parameter = parameters,
    lower_limit = lower_limit,
    upper_limit = upper_limit
  )
  write.csv(limits, file.path(output.dir, 'FRED_parameters_limits.csv'), row.names = FALSE)
  write.csv(limits, 'FRED_parameters_limits.csv', row.names = FALSE)
}

# Call the function to save the limits to CSV
save_limits_to_csv()


##==============================================#
## Initial conditions-------------------
##==============================================#
##initial_inf_file = sprintf('../../input_files/%d_imports_alternative.csv', state_code)
initial_inf_file = sprintf('../../fred_input_files/imports/%d_imports_combined.csv', 11001)

primary_cases_file = file.path(output.dir, sprintf('initial_cases_%d_%d.txt',state_code, 1:reps))

initial_df = read_csv(initial_inf_file)
initial_df$day = as.numeric(difftime(initial_df$Date, as.Date(start_date), units='days'))

#variants_imp_file = '../../fred_input_files/imports/COL_variant_imports.csv'
variants_imp_file = sprintf("../../fred_input_files/imports/%s_scaled_imports.csv", state_code)
variants_imp_df = read_csv(variants_imp_file)

## Sample 'reps' from the initial conditions
## replicate_init = sample.int(n=length(unique(initial_df$Replicate)), size = reps, replace=T)

for(nn in 1:reps){
# foreach(nn = 1:reps) %dopar% {
    ## tmp_df = filter(initial_df, Replicate == replicate_init[nn]) %
    ##     arrange(day) %>% dplyr::select(Imports, day)

    ## For now, choose the mean
    tmp_df = initial_df %>% group_by(day) %>% summarize(Imports = ceiling(mean(Imports))) %>% ungroup()
    
    tmp_df$day = tmp_df$day + scalars_sobol_df$influenza_introduction_day_shift[nn]

    tmp_df$Imports = round(tmp_df$Imports * scalars_sobol_df$imports_factor[nn])
    month_imports = ceiling(mean(tmp_df$Imports[(tmp_df$day <= (max(tmp_df$day) - 30)) & (tmp_df$Imports > 0)]))

    ## Now, let's add cases by week after initial cases            
    extra_rows = numDays - nrow(tmp_df)
    weekly_imports = month_imports * 7
    if(extra_rows > 0){
        week_imp = data.frame(Imports = rep(weekly_imports, floor(extra_rows/7)), stringsAsFactors = F)
        week_imp$day = seq(from=max(tmp_df$day) + 1, by = 7, length.out = nrow(week_imp))
        tmp_df = bind_rows(tmp_df, week_imp)
    }
    if(variants_in >= 0){
        # alpha_imports = filter(variants_imp_df, variant == "20I (Alpha, V1)") %>%
        #     mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
        #     mutate(Imports = round(scalars_sobol_df$variantalpha_imports_factor[nn] * TotalVariantImports)) %>%
        #     filter(Imports >= 1)

        # gamma_imports = filter(variants_imp_df, variant == "20J (Gamma, V3)") %>%
        #     mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
        #     mutate(Imports = round(scalars_sobol_df$variantgamma_imports_factor[nn] * TotalVariantImports)) %>%
        #     filter(Imports >= 1,Date <= as.Date('2021-04-01'))

        # delta_imports = filter(variants_imp_df, variant == "21A (Delta)") %>%
        #     mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
        #     mutate(Imports = round(scalars_sobol_df$variantdelta_imports_factor[nn] * TotalVariantImports)) %>%
        #     filter(Imports >= 1, Date >= as.Date('2021-04-01')) %>%
        #     mutate(day = day + 60 + 15)

        # ########################################################################################################
        # omicron_imports = filter(variants_imp_df, variant == "21K (Omicron)" | variant == "21L (Omicron)" | variant == "22A (Omicron)") %>%
        #     mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
        #     mutate(Imports = round(scalars_sobol_df$variantomicron_imports_factor[nn] * TotalVariantImports)) %>%
        #     filter(Imports >= 1, Date > as.Date('2021-11-01')) %>%
        #     mutate(day = day + 9) %>%
        #     dplyr::select(day, Imports)

        # ########################################################################################################
        # omicronBAX_imports = filter(variants_imp_df, variant == "22E (Omicron)") %>%
        #     mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
        #     mutate(Imports = round(scalars_sobol_df$variantomicronBAX_imports_factor[nn] * TotalVariantImports)) %>%
        #     #filter(Imports >= 1, Date > as.Date('2021-12-15'), Date <= as.Date('2022-03-20')) %>%
        #     filter(Imports >= 1, Date > as.Date('2022-09-01')) %>%
        #     mutate(day = day - 90) %>%
        #     dplyr::select(day, Imports)

        # wild_imports <- variants_imp_df %>%
        #     filter(variant == "Otros") %>%
        #     mutate(day = as.numeric(Date - as.Date('2020-01-01')) + scalars_sobol_df$influenza_introduction_day_shift[nn])  %>%
        #     mutate(Imports = round(scalars_sobol_df$imports_factor[nn] * scaled_imports)) %>%
        #     filter(Imports >= 1)

        wild_imports <- variants_imp_df %>%
            filter(variant == "Otros") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01')) + scalars_sobol_df$influenza_introduction_day_shift[nn]) %>%
            mutate(Imports = round(scalars_sobol_df$imports_factor[nn] * scaled_imports)) %>%
            #mutate(Imports = if_else(Date > as.Date('2020-09-01'), Imports * 4, Imports)) %>%
            filter(Imports >= 1)

        alpha_imports <- variants_imp_df %>%
            filter(variant == "Alpha") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01')) ) %>%
            mutate(Imports = round(scalars_sobol_df$variantalpha_imports_factor[nn] * scaled_imports)) %>%
            filter(Imports >= 1)

        gamma_imports <- variants_imp_df %>%
            filter(variant == "Gamma") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
            mutate(Imports = round(scalars_sobol_df$variantgamma_imports_factor[nn] * scaled_imports)) %>%
            filter(Imports >= 1) #, Date <= as.Date('2021-04-01')

        kappa_imports <- variants_imp_df %>%
            filter(variant == "Mu") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01')) + scalars_sobol_df$variantkappa_introduction_day[nn]) %>%
            mutate(Imports = round(scalars_sobol_df$variantkappa_imports_factor[nn] * scaled_imports)) %>%
            filter(Imports >= 1) #, Date <= as.Date('2021-04-01')

        delta_imports <- variants_imp_df %>%
            filter(variant == "Delta") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
            mutate(Imports = round(scalars_sobol_df$variantdelta_imports_factor[nn] * scaled_imports)) %>%
            filter(Imports >= 1) %>% #Date >= as.Date('2021-04-01')
            mutate(day = day)

        omicron_imports <- variants_imp_df %>%
            filter(variant == "Omicron") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01')) + scalars_sobol_df$variantomicron_introduction_day_shift[nn]) %>%
            mutate(Imports = round(scalars_sobol_df$variantomicron_imports_factor[nn] * scaled_imports)) %>%
            filter(Imports >= 1) %>% #, Date > as.Date('2021-11-01')
            mutate(day = day) %>%
            select(day, Imports)

        omicronBAX_imports <- variants_imp_df %>%
            filter(variant == "Omicron_") %>%
            mutate(day = as.numeric(Date - as.Date('2020-01-01'))) %>%
            mutate(Imports = round(scalars_sobol_df$variantomicron_imports_factor[nn] * scaled_imports)) %>%
            filter(Imports >= 1) %>% # Date > as.Date('2022-09-01')
            mutate(day = day + 10000) %>%
            select(day, Imports)
        
        tmp_df$Date = tmp_df$day + as.Date('2020-01-01')
        tmp_df_main = tmp_df[tmp_df$Date < as.Date('2020-12-10'),]

        tmp_df_variantkappa = tmp_df[tmp_df$Date >= as.Date('2020-01-01') + round(scalars_sobol_df$variantkappa_introduction_day[nn]) & tmp_df$Date <= as.Date('2021-06-01'),]

        #init_cases_base_lines = sprintf('%.0f %.0f %.0f 0 1 %.0f', tmp_df_main$day, tmp_df_main$day, tmp_df_main$Imports, tmp_df_main$Imports)
        init_cases_base_lines = sprintf('%.0f %.0f %.0f 0 1 %.0f', wild_imports$day, wild_imports$day, wild_imports$Imports, wild_imports$Imports)

        ## Alpha
        init_cases_alpha_lines = sprintf('%.0f %.0f %.0f 1 1 %.0f', alpha_imports$day, alpha_imports$day, alpha_imports$Imports, alpha_imports$Imports)
        
        ## Gamma
        init_cases_gamma_lines = sprintf('%.0f %.0f %.0f 2 1 %.0f', gamma_imports$day, gamma_imports$day, gamma_imports$Imports, gamma_imports$Imports)
        
        ## Mu
        #init_cases_kappa_lines = sprintf('%.0f %.0f %.0f 3 1 %.0f', tmp_df_variantkappa$day, tmp_df_variantkappa$day, tmp_df_variantkappa$Imports, tmp_df_variantkappa$Imports)
        init_cases_kappa_lines = sprintf('%.0f %.0f %.0f 3 1 %.0f', kappa_imports$day, kappa_imports$day, kappa_imports$Imports, kappa_imports$Imports)
        
        ## Delta
        init_cases_delta_lines = sprintf('%.0f %.0f %.0f 4 1 %.0f', delta_imports$day, delta_imports$day, delta_imports$Imports, delta_imports$Imports)

        ## Omicron
        init_cases_omicron_lines = sprintf('%.0f %.0f %.0f 5 1 %.0f', omicron_imports$day, omicron_imports$day, omicron_imports$Imports, omicron_imports$Imports)  
        
        ## OmicronBAX
        #init_cases_omicronBAX_lines = sprintf('%.0f %.0f %.0f 6 1 %.0f', omicronBAX_imports$day, omicronBAX_imports$day, omicronBAX_imports$Imports, omicronBAX_imports$Imports)  
        
        init_cases_lines = c(init_cases_base_lines, init_cases_alpha_lines, init_cases_gamma_lines, init_cases_kappa_lines, init_cases_delta_lines, init_cases_omicron_lines)

    }else{
        init_cases_lines = sprintf('%.0f %.0f %.0f 0 1 %.0f', tmp_df$day, tmp_df$day, tmp_df$Imports, tmp_df$Imports)
    }
    
    fileConn<-file(primary_cases_file[nn])
    writeLines(init_cases_lines, fileConn)
    close(fileConn)
}

##==============================================#
## School closure-------------------
##==============================================#
schools_open_list = read_csv(sprintf('../../fred_input_files/interventions/%d_schools_open.csv',state_code))
schools_open_list$Capacity[schools_open_list$Capacity > 1] = 1.0

school_schedule_closed_file = file.path(output.dir, sprintf('school_schedule_closed_%d.txt',state_code))

## Parse updated list of schools reopened
## Process school reopen files and transform into Unidad Catastral capacity
sim_start_date = as.Date(start_date)
school_reopen_list_file = sprintf('../../fred_input_files/interventions/%d_schools_open_2021.csv',state_code)
school_reopen_df = read_csv(school_reopen_list_file) %>%
    group_by(Grade, zipcode, start_date, end_date) %>%
    summarize(Capacity = ifelse(InPerson<Total_students, InPerson/Total_students, 1.0)) %>%
    ungroup() %>%
    mutate(MinAge = ifelse(Grade == 'PREK', 0,
                    ifelse(Grade == 'PRIMARY', 6,
                    ifelse(Grade == 'SECONDARY',11,18))),
           MaxAge = ifelse(Grade == 'PREK', 5,
                    ifelse(Grade == 'PRIMARY', 10,
                    ifelse(Grade == 'SECONDARY',17,20)))) %>%
    mutate(start_day = as.numeric(start_date - sim_start_date),
           end_day = as.numeric(end_date - sim_start_date)) %>%
    mutate(end_day = ifelse(end_day == max(end_day), numDays, end_day)) %>%
    replace_na(list(zipcode = "")) %>%
    filter(zipcode != "Bogota")

    
## Write files
{
    initial_closure = sprintf("%d %d 1 20 0", school_closure_day_in,  as.integer(as.Date('2020-12-15') - as.Date(start_date)))
    ## Make sure this is working properly
    vacation_closure = sprintf("%d %d 1 20 0", as.integer(as.Date('2020-12-15') - as.Date(start_date)), numDays)
    school_baseline_reopen_date = as.integer(early_school_vacation_end - as.Date(start_date)) + 1
    school_current_early_open_date = as.integer(current_open_date - as.Date(start_date)) + 1
    ## Schools already open in 2020
    current_open_school_lines = c(initial_closure, vacation_closure)

    zipcodes = unique(schools_open_list$zipcode)
    for(ll in 1:length(zipcodes)){
        localidad_tmp = schools_open_list %>%
                            filter(zipcode == zipcodes[ll])
        esc_in_loc = sprintf("%s", zipcodes[ll])

        if(nrow(localidad_tmp[localidad_tmp$Grade == 'SECONDARY','Capacity']) == 0){
            secondary_capacity = 0
        } else{
            secondary_capacity = localidad_tmp[localidad_tmp$Grade == 'SECONDARY','Capacity']
        }

        if(nrow(localidad_tmp[localidad_tmp$Grade == 'UNIVERSITY','Capacity']) == 0){
            university_capacity = 0
        } else{
            university_capacity = localidad_tmp[localidad_tmp$Grade == 'UNIVERSITY','Capacity']
        }


        current_open_school_lines = c(current_open_school_lines,
                                      sprintf("%d %d 18 20 %0.4f 0 %s",
                                              school_current_early_open_date,
                                              as.integer(as.Date('2020-12-15') - as.Date(start_date)),
                                              university_capacity, esc_in_loc),
                                      sprintf("%d %d 1 17 %.4f 0 %s",
                                              school_current_early_open_date,
                                              as.integer(as.Date('2020-12-15') - as.Date(start_date)),
                                              secondary_capacity, esc_in_loc))
    }   
    ## 2021 reopened schools
    tmp_school_open = filter(school_reopen_df, Grade != 'UNIVERSITY')
    tmp_college_open = filter(school_reopen_df, Grade == 'UNIVERSITY')
    current_open_school_lines = c(current_open_school_lines, sprintf("%d %d %d %d %.4f 0 11001%s",tmp_school_open$start_day,tmp_school_open$end_day, tmp_school_open$MinAge, tmp_school_open$MaxAge, tmp_school_open$Capacity, tmp_school_open$zipcode))
    current_open_school_lines = c(current_open_school_lines,
                                  sprintf("%d %d 18 20 %.4f", tmp_college_open$start_day, tmp_college_open$end_day, tmp_college_open$Capacity))

    
    ## Write reopening files    
    fileConn<-file(school_schedule_closed_file)
    writeLines(current_open_school_lines, fileConn)
    close(fileConn)
}

##==============================================#
## Community increase-------------------
##==============================================#
if(variants_in == 0){
    community_timeseries_df = read_csv('../../fred_input_files/interventions/interventions_covid_timevarying_community.csv')
}else{
    community_timeseries_df = read_csv('../../fred_input_files/interventions/interventions_covid_timevarying_community_baseline.csv')
}
community_timeseries_file = file.path(output.dir, sprintf("community_timeseries_%d.txt", 1:reps))
community_timeseries_df = community_timeseries_df %>% filter(State == state_code) 
community_timeseries_df$day = as.numeric(community_timeseries_df$date - as.Date(start_date))
community_timeseries_df$community_trend[community_timeseries_df$date < as.Date('2020-05-15')] = community_timeseries_df$community_trend[community_timeseries_df$date == as.Date('2020-05-15')]

community_timeseries_df$community_trend = community_timeseries_df$community_trend - community_timeseries_df$community_trend[1]
for(nn in 1:reps){        
    tmp_comm_df = community_timeseries_df
    ##community_timeseries_df$contact_rate = 1 - (1 - community_timeseries_df$community_trend) * scalars_sobol_df$community_contact_rate_1[nn]
    # Modify contact_rate using the initial community trend and the first scalar
    tmp_comm_df$contact_rate <- tmp_comm_df$community_trend * scalars_sobol_df$community_contact_rate_1[nn] + 1

    # Modify contact_rate for values after the second peak
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(second_peak_date - as.Date(start_date))] <- 
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(second_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$community_contact_rate_2[nn]

    # Modify contact_rate for values after the third peak
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(third_peak_date - as.Date(start_date))] <- 
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(third_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$community_contact_rate_3[nn]

    # Modify contact_rate for values after the third peak
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(fourth_peak_date - as.Date(start_date))] <- 
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(fourth_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$community_contact_rate_4[nn]

    # Modify contact_rate for values after the third peak
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(after_fourth_peak_date - as.Date(start_date))] <-
    tmp_comm_df$contact_rate[tmp_comm_df$day > as.numeric(after_fourth_peak_date - as.Date(start_date))] *
    scalars_sobol_df$community_contact_rate_5[nn]

    tmp_comm_df$contact_rate[tmp_comm_df$contact_rate < 0] = 0

    community_time_lines = sprintf('%.0f %.0f %.4f', tmp_comm_df$day, tmp_comm_df$day, tmp_comm_df$contact_rate)

    fileConn<-file(community_timeseries_file[nn])
    writeLines(community_time_lines, fileConn)
    close(fileConn)
}

##==============================================#
## Vaccine timeseries-------------------
##==============================================#
vaccine_daily_capacity_file = file.path(output.dir, "vaccination_daily_capacity_timeseries.txt")
vaccine_stock_file = file.path(output.dir, "vaccination_stock_timeseries.txt")


vaccine_stock_df = read.csv(sprintf('../../fred_input_files/vaccines/%d_vaccine_stock_timeseries.csv', state_code)) %>%
    drop_na()
vaccine_stock_df$day = as.numeric(as.Date(vaccine_stock_df$Date) - as.Date(start_date))
vaccine_daily_df = read.csv(sprintf('../../fred_input_files/vaccines/%d_vaccine_capacity_timeseries.csv', state_code))
vaccine_daily_df$day = as.numeric(as.Date(vaccine_daily_df$Date) - as.Date(start_date))
vaccine_daily_df$VaccinesApplied = round(vaccine_daily_df$VaccinesApplied)

vaccine_stock_lines = sprintf("%.0f %.0f %.0f %.0f",vaccine_stock_df$day, vaccine_stock_df$day, vaccine_stock_df$TotalVaccines, vaccine_stock_df$ID)

fileConn<-file(vaccine_stock_file)
writeLines(vaccine_stock_lines, fileConn)
close(fileConn)

vaccine_capacity_lines = c(sprintf("%.0f %.0f",vaccine_daily_df$day,vaccine_daily_df$VaccinesApplied))

fileConn<-file(vaccine_daily_capacity_file)
writeLines(vaccine_capacity_lines, fileConn)
close(fileConn)

##==============================================#
## Facemask compliance-------------------
##==============================================#
school_facemask_compliance = 0.75
facemask_time_file = file.path(output.dir, sprintf('facemask_compliance_timeseries_%d_%d.txt',state_code,1:reps))

facemask_timeseries_df = read_csv('../../fred_input_files/facemask/facemask_timeseries_compliance.csv') %>%
    dplyr::select(-Day)
facemask_timeseries_df$day = as.numeric(difftime(facemask_timeseries_df$Date, as.Date(start_date), units='days'))

for(nn in 1:reps){
    # foreach(nn = 1:reps) %dopar% {
        ## For now, choose the mean
    #    tmp_df = facemask_timeseries_df %>% filter(State == tolower(interventions_st_df$state_name[interventions_st_df$State == state_code])) %>%
    #        mutate(FacemaskTrends = FacemaskTrends * scalars_sobol_df$facemask_compliance[nn]) %>%
    # Modify FacemaskTrends using mutate and adjust for the scalars in the Sobol dataframe
    tmp_df <- facemask_timeseries_df %>%
    mutate(FacemaskTrends = FacemaskTrends * scalars_sobol_df$facemask_compliance[nn]) %>%
    dplyr::select(day, FacemaskTrends)

    # Modify FacemaskTrends for values after the second peak
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(second_peak_date - as.Date(start_date))] <- 
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(second_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$facemask_compliance_2[nn]

    # Modify FacemaskTrends for values after the third peak
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(third_peak_date - as.Date(start_date))] <- 
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(third_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$facemask_compliance_3[nn]

    # Modify FacemaskTrends for values after the third peak
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(fourth_peak_date - as.Date(start_date))] <- 
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(fourth_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$facemask_compliance_4[nn]

    # Modify FacemaskTrends for values after the third peak
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(after_fourth_peak_date - as.Date(start_date))] <-
    tmp_df$FacemaskTrends[tmp_df$day > as.numeric(after_fourth_peak_date - as.Date(start_date))] *
    scalars_sobol_df$facemask_compliance_5[nn]


    if(max(tmp_df$day) < numDays){
        tmp_df2 = data.frame(day = seq(from=max(tmp_df$day) + 1, to = numDays),
                             FacemaskTrends = tail(tmp_df$FacemaskTrends,1), stringsAsFactors = F)
        tmp_df = bind_rows(tmp_df, tmp_df2)
    }

    compliance_time_lines = c()
    for(loc in c("workplace", "office", "other")){
        compliance_time_lines = c(compliance_time_lines,
                                  sprintf('%.0f %.0f %.4f %s', tmp_df$day, tmp_df$day, tmp_df$FacemaskTrends, loc)
                                  )
    }

    ## Schools start facemask compliance when they open
    facemask_school_day = as.integer(current_open_date - as.Date(start_date))
    school_high_lines = c()
    
    for(loc in c("school", "classroom")){
        school_high_lines = c(school_high_lines, sprintf('%.0f %.0f %.4f %s', facemask_school_day, numDays, school_facemask_compliance, loc))
    }

    school_high_lines = c(compliance_time_lines, school_high_lines)
    
    ## Schools start facemask compliance when they open    
    fileConn<-file(facemask_time_file[nn])
    writeLines(school_high_lines, fileConn)
    close(fileConn)    
}


##==============================================#
## Shelter in place-------------------
##==============================================#
post_lockdown_mobility_in = 0.1
shelter_time_file = file.path(output.dir, sprintf('shelter_timeseries_%d_%d.txt',state_code,1:reps))

## Moving away from google's data to Grandata census-tract specific
shelter_timeseries_df = read_csv('../../fred_input_files/interventions/interventions_covid_timevarying_shelter.csv')
# shelter_timeseries_df = read_csv(sprintf('../../fred_input_files/shelter_trends/%d_shelter_trends.csv',state_code))
#shelter_timeseries_df = read_csv('../../fred_input_files/11001_mobility_trends_baseline.csv')
shelter_timeseries_df$day = as.numeric(difftime(shelter_timeseries_df$date, as.Date(start_date), units='days'))
#shelter_timeseries_df$State <- state_code
#shelter_timeseries_df$replicate <- 1

# Use map_df to iterate over ZIP codes, apply your operations, and concatenate the results
state_shelter_df <- map_df(zipcodes, function(zip_code) {
  shelter_timeseries_df %>%
    filter(State == state_code, replicate == 1) %>%
    #mutate(StateCod = sprintf('%s', State, zip_code),  # Assuming State is a number. Adjust the format as needed
    mutate(StateCod = sprintf('%s', zip_code),  # Assuming State is a number. Adjust the format as needed
           minAge = 0, 
           maxAge = 120) %>%
    select(day, shelter_trend, minAge, maxAge, StateCod)
})
        
max_tmp_day = max(state_shelter_df$day)
if(max_tmp_day > numDays){max_tmp_day = numDays}

 
#df_ = state_shelter_df %>% dplyr::filter(StateCod == '1515')
#plot(df_$shelter_trend)

# foreach(nn = 1:reps) %dopar% {
# #for(nn in 1:reps){    
#     ## For now, choose one replicate
#     ##start_t = Sys.time()
#     tmp_df = state_shelter_df %>% 
#         mutate(shelter_trend = shelter_trend * scalars_sobol_df$shelter_in_place_compliance[nn])
#     tmp_df$day2 = tmp_df$day
    
#     tmp_df_tail = tmp_df[tmp_df$day == max_tmp_day,]
#     tmp_df_tail$day = max_tmp_day + 1
#     tmp_df_tail$shelter_trend = post_lockdown_mobility_in * tmp_df_tail$shelter_trend
#     tmp_df_tail$day2 = tmp_df_tail$day
    
#     tmp_df$shelter_trend[tmp_df$shelter_trend < 0.0001] = 0.0
#     tmp_df$shelter_trend[tmp_df$shelter_trend > 1.0] = 1.0
#     tmp_df = bind_rows(tmp_df, tmp_df_tail)
    
#     write_delim(tmp_df[c('day','day2','shelter_trend','minAge','maxAge','StateCod')],file = shelter_time_file[nn],col_names = F)
    
#     ##shelter_time_lines = sprintf('%.0f %.0f %.4f 0 120 %s', tmp_df$day, tmp_df$day, tmp_df$shelter_trend, tmp_df$StateCod)    
#     ##ashelter_time_lines = sapply(1:nrow(tmp_df),function(x){sprintf('%.0f %.0f %.4f 0 120 %d%s', tmp_df$day[x], tmp_df$day[x], tmp_df$shelter_trend[x], tmp_df$State[x], tmp_df$SCACODIGO[x])})
#     ##a = do.call(sprintf,c('%.0f %.0f %.4f 0 120 %d%s',
#     ##shelter_time_tail_lines = sprintf('%.0f %.0f %.4f 0 120 %s', tmp_df_tail$day, numDays, tmp_df_tail$shelter_trend, tmp_df_tail$StateCod)

#     ## Add shelter by age
#     ## shelter_age_lines = sprintf("82 212 %.4f 60 120", scalars_sobol_df$shelter_in_place_age_compliance[nn])
#     ## fileConn<-file(shelter_time_file[nn])
#     ## writeLines(c(shelter_time_lines, shelter_time_tail_lines), fileConn)
#     ## close(fileConn)
# }

# # Function to process a chunk and write files
# process_chunk <- function(start, end) {
#   for (nn in start:end) {
#     tmp_df = state_shelter_df %>%
#       mutate(shelter_trend = shelter_trend * scalars_sobol_df$shelter_in_place_compliance[nn])
#     tmp_df$day2 = tmp_df$day
       
#     tmp_df_tail = tmp_df[tmp_df$day == max_tmp_day,]
#     tmp_df_tail$day = max_tmp_day + 1
#     tmp_df_tail$shelter_trend = post_lockdown_mobility_in * tmp_df_tail$shelter_trend
#     tmp_df_tail$day2 = tmp_df_tail$day
    
#     tmp_df$shelter_trend[tmp_df$shelter_trend < 0.0001] = 0.0
#     tmp_df$shelter_trend[tmp_df$shelter_trend > 1.0] = 1.0
#     tmp_df = bind_rows(tmp_df, tmp_df_tail)

#     # Write the file
#     write_delim(tmp_df[c('day','day2','shelter_trend','minAge','maxAge','StateCod')],
#                 file = shelter_time_file[nn], col_names = FALSE)
#   }
# }

# # Define the range of nn values
# nn_range <- 1:reps

# # Split nn_range into chunks
# nn_chunks <- split(nn_range, ceiling(seq_along(nn_range) / chunk_size))

# start_t = Sys.time()

# # Parallel computation using foreach
# foreach(chunk = nn_chunks) %dopar% {
#   process_chunk(chunk[[1]], chunk[[length(chunk)]])
# }

# # Stop the parallel backend
# stopCluster(cl)

# end_t = Sys.time()
# print(sprintf("Creating shelter files took %.04f", as.numeric(end_t - start_t)))

# Function to process and write a chunk
process_and_write_chunk <- function(chunk) {
  for (nn in chunk) {
    # Modify shelter_trend using mutate and adjust for the scalars in the Sobol dataframe
    tmp_df <- state_shelter_df %>%
    mutate(shelter_trend = shelter_trend * scalars_sobol_df$shelter_in_place_compliance[nn])

    # Modify shelter_trend for values after the second peak
    tmp_df$shelter_trend[tmp_df$day > as.numeric(second_peak_date - as.Date(start_date))] <- 
    tmp_df$shelter_trend[tmp_df$day > as.numeric(second_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$shelter_in_place_compliance_2[nn]

    # Modify shelter_trend for values after the third peak
    tmp_df$shelter_trend[tmp_df$day > as.numeric(third_peak_date - as.Date(start_date))] <- 
    tmp_df$shelter_trend[tmp_df$day > as.numeric(third_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$shelter_in_place_compliance_3[nn]

    # Modify shelter_trend for values after the third peak
    tmp_df$shelter_trend[tmp_df$day > as.numeric(fourth_peak_date - as.Date(start_date))] <- 
    tmp_df$shelter_trend[tmp_df$day > as.numeric(fourth_peak_date - as.Date(start_date))] * 
    scalars_sobol_df$shelter_in_place_compliance_4[nn]

    # Modify shelter_trend for values after the third peak
    tmp_df$shelter_trend[tmp_df$day > as.numeric(after_fourth_peak_date - as.Date(start_date))] <-
    tmp_df$shelter_trend[tmp_df$day > as.numeric(after_fourth_peak_date - as.Date(start_date))] *
    scalars_sobol_df$shelter_in_place_compliance_5[nn]

    tmp_df$day2 = tmp_df$day

    tmp_df_tail = tmp_df[tmp_df$day == max_tmp_day,]
    tmp_df_tail$day = max_tmp_day + 1
    tmp_df_tail$shelter_trend = post_lockdown_mobility_in * tmp_df_tail$shelter_trend
    tmp_df_tail$day2 = tmp_df_tail$day

    tmp_df$shelter_trend[tmp_df$shelter_trend < 0.0001] = 0.0
    tmp_df$shelter_trend[tmp_df$shelter_trend > 1.0] = 1.0
    tmp_df = bind_rows(tmp_df, tmp_df_tail)

    lines <- apply(tmp_df[c('day', 'day2', 'shelter_trend', 'minAge', 'maxAge', 'StateCod')], 1, paste, collapse = " ")

    # Open the file in append mode and write lines
    con <- file(shelter_time_file[nn], open = "at")
    cat(paste(lines, collapse = "\n"), file = con, sep = "\n")
    close(con)
  }
}

# Define the range of nn values
nn_range <- 1:reps

# Split nn_range into chunks
nn_chunks <- split(nn_range, ceiling(seq_along(nn_range) / chunk_size))

start_t <- Sys.time()

# Parallel computation using foreach
foreach(chunk = nn_chunks) %dopar% {
  process_and_write_chunk(chunk)
}

# Stop the parallel backend
stopCluster(cl)

end_t <- Sys.time()
time_taken <- end_t - start_t
print(paste("Time taken:", as.numeric(time_taken), "seconds"))

##==============================================#
## fixed parameters-------------------
##==============================================#
## IMPORTANT: The offset delays the epidemic. Does not include added days of imported cases
epidemic_offset = 0
num_demes = 1

##scalars_intervention = data.frame(stringsAsFactors=F)

scalars_intervention = scalars_sobol_df %>%
    mutate(
        seed = floor(scalars_sobol_df$seed),
        variants_in                                 = scalars_sobol_df$variants_in,
        primary_cases_file                          = primary_cases_file,
        imports_factor                              = scalars_sobol_df$imports_factor, 
        shelter_in_place_file                       = shelter_time_file,
        shelter_in_place_compliance                 = scalars_sobol_df$shelter_in_place_compliance,
        face_mask_timeseries_file                   = facemask_time_file,
        facemask_compliance                         = scalars_sobol_df$facemask_compliance,
        influenza_introduction_day_shift            = scalars_sobol_df$influenza_introduction_day_shift,
        influenza_transmissibility                  = scalars_sobol_df$influenza_transmissibility,
        influenza_susceptibility_by_age_offset      = scalars_sobol_df$influenza_susceptibility_by_age_offset,
        influenza_susceptibility_by_age_rate        = scalars_sobol_df$influenza_susceptibility_by_age_rate,
        influenza_susceptibility_by_age_cutoff      = scalars_sobol_df$influenza_susceptibility_by_age_cutoff,
        influenza_susceptibility_by_age_high        = scalars_sobol_df$influenza_susceptibility_by_age_high,
        nursing_home_incidence_importations_factor  = scalars_sobol_df$nursing_home_incidence_importations_factor,
        neighborhood_same_age_bias                  = scalars_sobol_df$neighborhood_same_age_bias,
        school_contacts                             = school_contacts_in * scalars_sobol_df$school_contact_factor,
        classroom_contacts                          = classroom_contacts_in * scalars_sobol_df$school_contact_factor,
        school_contact_factor                       = scalars_sobol_df$school_contact_factor,
        workplace_contacts                          = workplace_contacts_in * scalars_sobol_df$workplace_contact_factor,
        neighborhood_contacts                       = neighborhood_contacts_in * scalars_sobol_df$neighborhood_contact_factor,
        neighborhood_contact_factor                 = scalars_sobol_df$neighborhood_contact_factor,
        office_contacts                             = office_contacts_in * scalars_sobol_df$workplace_contact_factor,
        workplace_contact_factor                    = scalars_sobol_df$workplace_contact_factor,
        holiday_contact_rate                        = scalars_sobol_df$holiday_contact_rate,
        community_contact_rate_1                    = scalars_sobol_df$community_contact_rate_1,
        community_contact_timeseries_file           = community_timeseries_file,

        shelter_in_place_compliance_2                = scalars_sobol_df$shelter_in_place_compliance_2,
        facemask_compliance_2                        = scalars_sobol_df$facemask_compliance_2,
        community_contact_rate_2                     = scalars_sobol_df$community_contact_rate_2,

        shelter_in_place_compliance_3                = scalars_sobol_df$shelter_in_place_compliance_3,
        facemask_compliance_3                        = scalars_sobol_df$facemask_compliance_3,
        community_contact_rate_3                     = scalars_sobol_df$community_contact_rate_3,

        shelter_in_place_compliance_4                = scalars_sobol_df$shelter_in_place_compliance_4,
        facemask_compliance_4                        = scalars_sobol_df$facemask_compliance_4,
        community_contact_rate_4                     = scalars_sobol_df$community_contact_rate_4,

        shelter_in_place_compliance_5                = scalars_sobol_df$shelter_in_place_compliance_5,
        facemask_compliance_5                        = scalars_sobol_df$facemask_compliance_5,
        community_contact_rate_5                     = scalars_sobol_df$community_contact_rate_5,
        
        variantalpha_transmissibility               = scalars_sobol_df$variantalpha_transmissibility,
        variantalpha_transmissibility_factor        = scalars_sobol_df$variantalpha_transmissibility_factor,
        variantalpha_cross_protection_prob          = scalars_sobol_df$variantalpha_cross_protection_prob,
        variantalpha_imports_factor                 = scalars_sobol_df$variantalpha_imports_factor,
        variantalpha_susceptibility_by_age_offset   = scalars_sobol_df$variantalpha_susceptibility_by_age_offset,
        variantalpha_susceptibility_by_age_rate     = scalars_sobol_df$variantalpha_susceptibility_by_age_rate,
        variantalpha_susceptibility_by_age_cutoff   = scalars_sobol_df$variantalpha_susceptibility_by_age_cutoff,
        variantalpha_susceptibility_by_age_high     = scalars_sobol_df$variantalpha_susceptibility_by_age_high,
        variantalpha_severity_factor                = scalars_sobol_df$variantalpha_severity_factor,
        
        variantgamma_transmissibility =  scalars_sobol_df$variantgamma_transmissibility,
        variantgamma_transmissibility_factor =  scalars_sobol_df$variantgamma_transmissibility_factor,
        variantgamma_cross_protection_prob = scalars_sobol_df$variantgamma_cross_protection_prob,
        variantgamma_imports_factor = scalars_sobol_df$variantgamma_imports_factor,
        variantgamma_susceptibility_by_age_offset  = scalars_sobol_df$variantgamma_susceptibility_by_age_offset,
        variantgamma_susceptibility_by_age_rate = scalars_sobol_df$variantgamma_susceptibility_by_age_rate,
        variantgamma_susceptibility_by_age_cutoff = scalars_sobol_df$variantgamma_susceptibility_by_age_cutoff,
        variantgamma_susceptibility_by_age_high = scalars_sobol_df$variantgamma_susceptibility_by_age_high,
        variantgamma_severity_factor = scalars_sobol_df$variantgamma_severity_factor,
        
        variantkappa_transmissibility =  scalars_sobol_df$variantkappa_transmissibility,
        variantkappa_transmissibility_factor =  scalars_sobol_df$variantkappa_transmissibility_factor,
        variantkappa_cross_protection_prob = scalars_sobol_df$variantkappa_cross_protection_prob,
        variantkappa_introduction_day = scalars_sobol_df$variantkappa_introduction_day,
        variantkappa_susceptibility_by_age_offset  = scalars_sobol_df$variantkappa_susceptibility_by_age_offset,
        variantkappa_susceptibility_by_age_rate = scalars_sobol_df$variantkappa_susceptibility_by_age_rate,
        variantkappa_susceptibility_by_age_cutoff = scalars_sobol_df$variantkappa_susceptibility_by_age_cutoff,
        variantkappa_susceptibility_by_age_high = scalars_sobol_df$variantkappa_susceptibility_by_age_high,
        variantkappa_severity_factor = scalars_sobol_df$variantkappa_severity_factor,
        variantkappa_imports_factor = scalars_sobol_df$variantkappa_imports_factor,
        
        variantdelta_transmissibility =  scalars_sobol_df$variantdelta_transmissibility,
        variantdelta_transmissibility_factor =  scalars_sobol_df$variantdelta_transmissibility_factor,
        variantdelta_cross_protection_prob = scalars_sobol_df$variantdelta_cross_protection_prob,
        variantdelta_imports_factor = scalars_sobol_df$variantdelta_imports_factor,
        variantdelta_susceptibility_by_age_offset  = scalars_sobol_df$variantdelta_susceptibility_by_age_offset,
        variantdelta_susceptibility_by_age_rate = scalars_sobol_df$variantdelta_susceptibility_by_age_rate,
        variantdelta_susceptibility_by_age_cutoff = scalars_sobol_df$variantdelta_susceptibility_by_age_cutoff,
        variantdelta_susceptibility_by_age_high = scalars_sobol_df$variantdelta_susceptibility_by_age_high,   
        variantdelta_severity_factor = scalars_sobol_df$variantdelta_severity_factor,
        variantomicron_introduction_day_shift = scalars_sobol_df$variantomicron_introduction_day_shift,
        variantomicron_transmissibility =  scalars_sobol_df$variantomicron_transmissibility,
        variantomicron_transmissibility_factor =  scalars_sobol_df$variantomicron_transmissibility_factor,
        variantomicron_cross_protection_prob = scalars_sobol_df$variantomicron_cross_protection_prob,
        variantomicron_imports_factor = scalars_sobol_df$variantomicron_imports_factor,
        variantomicron_susceptibility_by_age_offset  = scalars_sobol_df$variantomicron_susceptibility_by_age_offset,
        variantomicron_susceptibility_by_age_rate = scalars_sobol_df$variantomicron_susceptibility_by_age_rate,
        variantomicron_susceptibility_by_age_cutoff = scalars_sobol_df$variantomicron_susceptibility_by_age_cutoff,
        variantomicron_susceptibility_by_age_high = scalars_sobol_df$variantomicron_susceptibility_by_age_high,   
        variantomicron_severity_factor = scalars_sobol_df$variantomicron_severity_factor)


        
        # variantomicronBAX_transmissibility =  scalars_sobol_df$variantomicronBAX_transmissibility,
        # variantomicronBAX_transmissibility_factor =  scalars_sobol_df$variantomicronBAX_transmissibility_factor,
        # variantomicronBAX_cross_protection_prob = scalars_sobol_df$variantomicronBAX_cross_protection_prob,
        # variantomicronBAX_imports_factor = scalars_sobol_df$variantomicronBAX_imports_factor,
        # variantomicronBAX_susceptibility_by_age_offset  = scalars_sobol_df$variantomicronBAX_susceptibility_by_age_offset,
        # variantomicronBAX_susceptibility_by_age_rate = scalars_sobol_df$variantomicronBAX_susceptibility_by_age_rate,
        # variantomicronBAX_susceptibility_by_age_cutoff = scalars_sobol_df$variantomicronBAX_susceptibility_by_age_cutoff,
        # variantomicronBAX_susceptibility_by_age_high = scalars_sobol_df$variantomicronBAX_susceptibility_by_age_high,
        # variantomicronBAX_severity_factor = scalars_sobol_df$variantomicronBAX_severity_factor

        #    variantomicronBAX_asymp_infectivity               = asymp_infectivity_in,
        #    variantomicronBAX_susceptibility_by_age_minage    = influenza_susceptibility_by_age_minage_in,
        #    variantomicronBAX_susceptibility_by_age_minvalue  = influenza_susceptibility_by_age_minvalue_in,
        #    variantomicronBAX_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in, 

##==============================================#
## Create parameters to sweep-----------------
##==============================================#
## TODO:
## 1. Create DF with parameters
scalars = scalars_intervention %>%
    mutate(days = numDays,
           track_infection_events                       = track_infection_events_in,
           enable_age_specific_susceptibility           = enable_age_specific_susceptibility_in,
           influenza_asymp_infectivity                  = asymp_infectivity_in,
           enable_age_specific_susceptibility_min       = enable_age_specific_susceptibility_min_in,
           influenza_susceptibility_by_age_minage       = influenza_susceptibility_by_age_minage_in,
           influenza_susceptibility_by_age_minvalue     = influenza_susceptibility_by_age_minvalue_in,
           influenza_face_mask_transmission_efficacy    = face_mask_transmission_efficacy_in,
          
           variantalpha_asymp_infectivity               = asymp_infectivity_in,
           variantalpha_susceptibility_by_age_minage    = influenza_susceptibility_by_age_minage_in,
           variantalpha_susceptibility_by_age_minvalue  = influenza_susceptibility_by_age_minvalue_in,
           variantalpha_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in,
           
           variantgamma_asymp_infectivity               = asymp_infectivity_in,
           variantgamma_susceptibility_by_age_minage    = influenza_susceptibility_by_age_minage_in,
           variantgamma_susceptibility_by_age_minvalue  = influenza_susceptibility_by_age_minvalue_in,
           variantgamma_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in,
           
           variantkappa_asymp_infectivity               = asymp_infectivity_in,
           variantkappa_susceptibility_by_age_minage    = influenza_susceptibility_by_age_minage_in,
           variantkappa_susceptibility_by_age_minvalue  = influenza_susceptibility_by_age_minvalue_in,
           variantkappa_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in,
           
           variantdelta_asymp_infectivity               = asymp_infectivity_in,
           variantdelta_susceptibility_by_age_minage    = influenza_susceptibility_by_age_minage_in,
           variantdelta_susceptibility_by_age_minvalue  = influenza_susceptibility_by_age_minvalue_in,
           variantdelta_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in, 

           variantomicron_asymp_infectivity               = asymp_infectivity_in,
           variantomicron_susceptibility_by_age_minage    = influenza_susceptibility_by_age_minage_in,
           variantomicron_susceptibility_by_age_minvalue  = influenza_susceptibility_by_age_minvalue_in,
           variantomicron_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in, 

           
           enable_nursing_homes_importations            = enable_nursing_homes_importations_in,
           enable_transmission_bias                     = enable_transmission_bias_in,
           track_fatality_events                        = track_fatality_events_in,
           report_age_of_infection                      = report_age_of_infection_in,
           report_incidence_by_county                   = report_incidence_by_county_in,
           report_place_of_infection                    = report_place_of_infection_in,
           isolation_rate                               = isolation_rate,
           shelter_in_place_students                    = shelter_in_place_students,
           num_demes                                    = num_demes,
           synthetic_population_id                      = synthetic_population_id,
           advance_seeding                              = advance_seeding,
           epidemic_offset                              = epidemic_offset,
           enable_shelter_in_place                      = enable_shelter_in_place,
           enable_shelter_in_place_timeseries           = enable_shelter_in_place_timeseries,
           shelter_in_place_delay_mean                  = shelter_in_place_delay_mean,
           school_closure_policy                        = school_closure_policy_in,
           school_reduced_capacity                      = school_reduced_capacity_in,
           enable_school_reduced_capacity               = enable_school_reduced_capacity_in,
           school_global_schedule_file                  = school_schedule_closed_file,
           school_student_teacher_ratio                 = school_student_teacher_ratio_in,
           school_closure_day                           = school_closure_day_in,
           school_closure_duration                      = school_closure_duration_in,
           enable_face_mask_timeseries                  = enable_face_mask_timeseries_in,
           min_age_face_masks                           = min_age_face_masks_in,
           enable_face_mask_usage                       = enable_face_mask_usage_in,
           holiday_start                                = holiday_start_in,
           holiday_end                                  = holiday_end_in,
           enable_holiday_contacts                      = enable_holiday_contacts_in,
           enable_community_contact_timeseries          = enable_community_contact_timeseries_in,
           start_date                                   = start_date)

if(variants_in >= 1){
    scalars$diseases = 6
    scalars$enable_disease_cross_protection = 1
    scalars$influenza_cross_protection_prob = 1.0
    scalars$disease_names = "6 influenza variantalpha variantgamma variantkappa variantdelta variantomicron"

    ## Vaccination
    scalars$enable_vaccination              = 1
    scalars$vaccination_capacity_file       = vaccine_daily_capacity_file
    scalars$vaccine_stock_timeseries_file   = vaccine_stock_file
    scalars$vaccination_phases_enable_discrete_timing = 1
}else{
    scalars$enable_vaccination = 0
}


##===============================================##
## Write the parameters to files---------------
##===============================================##
defaults_params             = '../../fred_input_files/params_covid/params_covid.txt'
defaults_covid_params       = '../../fred_input_files/params_covid/params_covid.txt'

defaults_alpha_params       = '../../fred_input_files/params_covid/params_covid_alpha.txt'
defaults_gamma_params       = '../../fred_input_files/params_covid/params_covid_gamma.txt'
defaults_kappa_params       = '../../fred_input_files/params_covid/params_covid_kappa.txt'
defaults_delta_params       = '../../fred_input_files/params_covid/params_covid_delta.txt'
defaults_omicron_params     = '../../fred_input_files/params_covid/params_covid_omicron.txt'
#defaults_omicronBAX_params  = '../../fred_input_files/params_covid/params_covid_omicronBAX.txt'
defaults_vaccine_params     = '../../fred_input_files/params_covid/params_covid_vaccine.txt'

print('------------------------------------------------------------')

if(variants_in >= 1){
    if(vaccination_in > 0){
        defaults_vaccine_params = sprintf('../../fred_input_files/params_covid/params_covid_vaccine_%d.txt', vaccination_in)
    }
    defaults_params = '../../fred_input_files/params_covid/params_covid_combined.txt'
  system(sprintf("/bin/cat %s %s %s %s %s %s %s > %s",
                 defaults_covid_params,
                 defaults_alpha_params, 
                 defaults_gamma_params,
                 defaults_kappa_params,
                 defaults_delta_params, 
                 defaults_omicron_params,
                 defaults_vaccine_params,
                 defaults_params))
}
print('------------------------------------------------------------')
basename_params = sprintf('covid_%s_params',state_code)
basename_jobs = sprintf('FRED_%s_calibration',state_code)
write_fred_parameters(scalars, defaults_params, output.dir,basename.in=basename_params, fred_defaults = fred_defaults)

## print report scalars parameters file with IDs
report_scalars = dplyr::select(
                            scalars, variants_in, 
                            influenza_introduction_day_shift,
                            influenza_transmissibility,
                            influenza_asymp_infectivity,
                            shelter_in_place_compliance,influenza_face_mask_transmission_efficacy,
                            enable_age_specific_susceptibility_min,
                            enable_age_specific_susceptibility,
                            influenza_susceptibility_by_age_minage,
                            influenza_susceptibility_by_age_minvalue,
                            enable_face_mask_usage, enable_face_mask_timeseries,
                            facemask_compliance, min_age_face_masks,
                            enable_shelter_in_place_timeseries, start_date,
                            community_contact_rate_1, 

                            shelter_in_place_compliance_2,
                            facemask_compliance_2,
                            community_contact_rate_2,

                            shelter_in_place_compliance_3,
                            facemask_compliance_3,
                            community_contact_rate_3,

                            shelter_in_place_compliance_4,
                            facemask_compliance_4,
                            community_contact_rate_4,

                            shelter_in_place_compliance_5,
                            facemask_compliance_5,
                            community_contact_rate_5,

                            enable_community_contact_timeseries,
                            nursing_home_incidence_importations_factor,
                            neighborhood_same_age_bias,
                            influenza_susceptibility_by_age_rate,
                            influenza_susceptibility_by_age_offset,
                            influenza_susceptibility_by_age_cutoff,
                            influenza_susceptibility_by_age_high,
                            variantalpha_transmissibility,
                            variantalpha_transmissibility_factor,
                            variantalpha_cross_protection_prob, 
                            variantalpha_imports_factor,
                            variantalpha_severity_factor,
                            variantgamma_transmissibility,
                            variantgamma_transmissibility_factor,
                            variantgamma_cross_protection_prob, 
                            variantgamma_imports_factor,
                            variantgamma_severity_factor,
                            variantkappa_transmissibility,
                            variantkappa_transmissibility_factor,
                            variantkappa_cross_protection_prob, 
                            variantkappa_introduction_day,
                            variantkappa_imports_factor,
                            variantkappa_severity_factor,
                            variantdelta_transmissibility, 
                            variantdelta_transmissibility_factor,
                            variantdelta_cross_protection_prob, 
                            variantdelta_imports_factor,
                            variantdelta_severity_factor,
                            variantomicron_introduction_day_shift,
                            variantomicron_transmissibility,
                            variantomicron_transmissibility_factor,
                            variantomicron_cross_protection_prob, 
                            variantomicron_imports_factor,
                            variantomicron_severity_factor,
                            imports_factor, days, seed, primary_cases_file, school_closure_policy,
                            school_closure_duration, school_closure_day, school_student_teacher_ratio,
                            shelter_in_place_delay_mean,
                            school_contacts,
                            classroom_contacts,
                            school_contact_factor,
                            workplace_contacts, office_contacts, workplace_contact_factor,
                            neighborhood_contacts, neighborhood_contact_factor,
                            enable_holiday_contacts,
                            holiday_contact_rate,
                            enable_vaccination
                            ) %>%
    mutate(job_id = sprintf("%s_%d", basename_jobs, row_number()), run_id = row_number(),
           params_file = sprintf('%s_%d.txt',basename_params,row_number()),
           reps = reps_per_job,
           state_code = state_code,
           advance_seeding = advance_seeding,
           epidemic_offset = epidemic_offset
           )


# variantomicronBAX_transmissibility,
# variantomicronBAX_transmissibility_factor,
# variantomicronBAX_cross_protection_prob, 
# variantomicronBAX_imports_factor,
# variantomicronBAX_severity_factor,

write.csv(report_scalars, file.path(output.dir, 'FRED_parameters.csv'), row.names= F, quote = F)
##===============================================##
## Write Slurm job function---------------
##===============================================##
write_submission_array_slurm = function(experiment_supername_in,
                                  experiment_name_in,
                                  experiment_dir_in,
                                  params_base,
                                  job_base,
                                  reps, scalars, FUN, cores_in=1, walltime_in = "0:45:00",
                                  fred_home_dir_in="~/Coronavirus/FRED", fred_results_in="~/Coronavirus/FRED_RESULTS",
                                  output_path = '../run_files'){
    print('submit array')    
    jobname = sprintf("%s-%s",experiment_supername_in, experiment_name_in)
    tmp_cmd_file = sprintf('tmp_execute_cmd_%s.txt',jobname)
    FUN(scalars, tmp_cmd_file, output_path)    
    n = nrow(scalars)
    submission_template = '#!/bin/bash
#SBATCH -o ELECT_%j.out
#SBATCH -J ELECT

#SBATCH --partition=CPU_Std32
#SBATCH --ntasks=32
#SBATCH --ntasks-per-core=1

export FRED_HOME=FREDHOMESTR
export FRED_RESULTS=FREDRESULTSSTR
export PATH=${FRED_HOME}/bin:$PATH

file="../TMPCMDFILE"
cd EXPERIMENTDIR

# Maximum number of concurrent jobs
max_jobs=25
# Time to wait before checking job statuses (in seconds)
sleep_time=1

# Initialize an associative array to keep track of job PIDs
declare -A pids

# Open the command file for reading
exec 3< "$file"

while true; do
    # Remove any finished jobs from the pids array
    for pid in "${!pids[@]}"; do
        if ! kill -0 "$pid" 2>/dev/null; then
            unset pids["$pid"]
        fi
    done

    # Start new jobs if we have not reached max_jobs and there are commands left
    while [ "${#pids[@]}" -lt "$max_jobs" ]; do
        if IFS= read -r -u 3 cmd; then
            # Start the command in the background
            eval "$cmd" &
            pid=$!
            # Add the PID to the array
            pids["$pid"]=1
        else
            # No more commands to read
            break
        fi
    done

    # Break the loop if no more commands and no running jobs
    if [ "${#pids[@]}" -eq 0 ] && ! read -t 0 -u 3; then
        break
    fi

    # Sleep before checking again
    sleep "$sleep_time"
done

# Close the file descriptor
exec 3<&-

# Wait for any remaining background jobs to finish
wait
'    
    submission_str = submission_template %>%
        str_replace_all(pattern="JOBNAME", replacement = jobname) %>%
        str_replace_all(pattern="EXPERIMENTDIR", replacement = experiment_dir_in) %>%
        str_replace_all(pattern="FREDHOMESTR", replacement = fred_home_dir_in) %>%
        str_replace_all(pattern="FREDRESULTSSTR", replacement = fred_results_in) %>%
        str_replace_all(pattern="JOBWALLTIME", replacement = walltime_in) %>%
        str_replace_all(pattern="JOBSQUEUE", replacement = as.character(n)) %>%
        str_replace_all(pattern="PARAMSBASE", replacement = params_base) %>%
        str_replace_all(pattern="JOBBASE", replacement = job_base) %>%
        str_replace_all(pattern="REPS", replacement = as.character(reps)) %>%
        str_replace_all(pattern="TMPCMDFILE", replacement = tmp_cmd_file) %>%
        str_replace_all(pattern="JOBCORES", replacement = as.character(cores_in))
        
    submission_file = sprintf("%s/%s_slurm.sh", output_path, state_code)
    file.connection = file(submission_file)
    write(submission_str,file.connection)
    system(sprintf("/bin/chmod a+x %s/%s_slurm.sh", output_path, state_code))
    close(file.connection)
    return(submission_file)
}

write_condor_sh_execution_file <- function(experiment_label_in, 
                                           jobs_queue, 
                                           tmp_cmd_file,
                                           state_code,
                                           worker         = "worker4",
                                           local_apps_dir = AGORA_path, 
                                           output_path    = "../run_files/") {
                                            
  sh_files = c() 
  sh_script <- paste0(
    "#!/bin/bash\n\n",
    

    "### JOB NUMBER\n",
    "PROCESS_NUMBER=$1\n",
    "PROCESS_NUMBER=$((PROCESS_NUMBER))\n\n",
    
    "### PATHS\n",
    "#export HOME=",local_apps_dir,"\n\n",
    "export HOME=/data_HPC02/agora\n",
    
    "### SET ENV PATH\n",
    "export PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin\n",
    "export PATH=$HOME/miniforge3/bin:$PATH\n\n",

    "### PATHS\n",
    "export PERL5LIB=/data_HPC02/agora/miniforge3/lib/perl5/vendor_perl\n",
    "export LD_LIBRARY_PATH=/data_HPC02/agora/miniforge3/lib/:/usr/lib/:/usr/lib64/\n",
    
    "### FRED SETUP\n",
    "export condor_local=$(realpath ./)\n",
    "export FRED_HOME=/home/ex-dveloza/FRED\n",
    "##export FRED_HOME=$condor_local/FRED\n",
    'echo "FRED_HOME is set to $FRED_HOME"\n\n',
    
    "export PATH=${PATH}:${FRED_HOME}/bin\n",
    'echo "PATH is set to $PATH"\n\n',

    "### FRED populations\n",
    "###mv colombia_", state_code, " $FRED_HOME/populations\n",

    "mkdir $condor_local/", experiment_label_in, "\n",
    "mv community_timeseries_$PROCESS_NUMBER.txt $condor_local/", experiment_label_in, "\n",
    "mv covid_",state_code,"_params_$PROCESS_NUMBER.txt $condor_local/", experiment_label_in, "\n",
    "mv facemask_compliance_timeseries_",state_code,"_$PROCESS_NUMBER.txt $condor_local/", experiment_label_in, "\n",
    "mv initial_cases_",state_code,"_$PROCESS_NUMBER.txt $condor_local/", experiment_label_in, "\n",
    "mv shelter_timeseries_",state_code,"_$PROCESS_NUMBER.txt $condor_local/", experiment_label_in, "\n",
    "mv FRED_parameters.csv $condor_local/", experiment_label_in, "\n",
    "mv FRED_parameters_limits.csv $condor_local/", experiment_label_in, "\n",
    "mv infection_hospitalization_risk_5.csv $condor_local/", experiment_label_in, "\n",
    "mv infection_hospitalization_risk.csv $condor_local/", experiment_label_in, "\n",
    "mv geoinfo_municipios_colombia.csv $condor_local/", experiment_label_in, "\n",
    "mv post_process_fred_calibration_var_0.R $condor_local/", experiment_label_in, "\n",
    "mv post_process_fred_calibration_var_1.R $condor_local/", experiment_label_in, "\n",
    "mv post_process_fred_calibration_var_2.R $condor_local/", experiment_label_in, "\n",
    "mv post_process_fred_calibration_var_3.R $condor_local/", experiment_label_in, "\n",
    "mv vaccination_daily_capacity_timeseries.txt $condor_local/", experiment_label_in, "\n",
    "mv vaccination_stock_timeseries.txt $condor_local/", experiment_label_in, "\n\n",
    
    "export FRED_RESULTS=$condor_local/", experiment_label_in, "/FRED_RESULTS\n",
    'echo "FRED_RESULTS is set to $FRED_RESULTS"\n\n',
    
    "### RUN JOB\n",
    "file='",tmp_cmd_file,"'\n",
    'CMD=$(sed -n "${PROCESS_NUMBER}p" $file)\n',
    'echo "CMD is set to $CMD"\n\n',
    
    "cd $condor_local/", experiment_label_in, "\n",
    'eval "$CMD"'
  )
  
  # Define the output file name for the worker
  sh_file_name <- sprintf("%s/job_executor_%s_%s.sh", output_path, state_code, calibration_label)
  
  # Write the script to a .sh file
  write(sh_script, sh_file_name)
  
  # Make the script executable
  system(paste0("chmod +x ", sh_file_name))
  
  sh_files = c(sh_files, sh_file_name)
  
  return(sh_files)
}

# generate_condor_scheduler_script <- function(experiment_supername_in,
#                                              experiment_name_in,
#                                              tmp_cmd_file,
#                                              experiment_label_in,
#                                              workers,
#                                              output_path = "../run_files/") {
  
#   submission_file = sprintf("%s/%s-%s.condor", output_path, experiment_supername_in, experiment_name_in)
#   worker_list <- paste(workers, collapse = '" "')
#   script_content <- sprintf('#!/bin/bash

# # variables
# WORKERS=("%s")
# TOTAL_LINES=$(wc -l < "%s")
# CURRENT_LINE=1

# # get the number of running jobs on a specific worker
# get_running_jobs() {
#     local WORKER=$1
#     condor_status -claimed | grep $WORKER | wc -l
# }

# # submit job to a specific worker
# submit_job_to_worker() {
#     local WORKER=$1
#     sed -i "s/\\(requirements\\s*=\\s*(Machine == \\)\\"[^\\"]*\\"/\\1\\"$WORKER\\"/g" %s
#     sed -i "/^Arguments\\s*=\\s*[0-9]\\+/s/[0-9]\\+/$CURRENT_LINE/" %s
#     sed -i "s/_[0-9]\\+\\.txt/_${CURRENT_LINE}.txt/g" %s
#     condor_submit %s
#     CURRENT_LINE=$((CURRENT_LINE+1))
# }

# cd %s

# worker_buffer=1
# slot_buffer=1
# while [ $CURRENT_LINE -le $TOTAL_LINES ]; do
#     for WORKER in "${WORKERS[@]}"; do
#         RUNNING_JOBS=$(get_running_jobs $WORKER)
        
#         while [ $RUNNING_JOBS -lt 40 ] && [ $CURRENT_LINE -le $TOTAL_LINES ]; do
#             echo "${WORKER} is running ${RUNNING_JOBS} jobs"
#             submit_job_to_worker $WORKER
            
#             echo "Waiting ${worker_buffer} seconds ...."
#             sleep $worker_buffer

#             RUNNING_JOBS=$(get_running_jobs $WORKER)
#             echo "-------------------------------------------------"
#         done
#     done
#     echo "Checking in ${slot_buffer} seconds if slot available"
#     sleep ${slot_buffer}
# done

# echo "All jobs submitted!"
# ', worker_list, tmp_cmd_file, submission_file, submission_file, submission_file, submission_file, output.dir)
  
#   script_file_name <- sprintf("%s/condor_scheduler_%s_%s.sh", output_path, state_code, calibration_label)
#   writeLines(script_content, script_file_name)
#   system(paste0("chmod +x ", script_file_name))
  
#   return(script_file_name)
# }

generate_condor_scheduler_script <- function(experiment_supername_in,
                                             experiment_name_in,
                                             tmp_cmd_file,
                                             experiment_label_in,
                                             workers,
                                             output_path = "../run_files/") {
  
  submission_file <- sprintf("%s/%s-%s.condor", output_path, experiment_supername_in, experiment_name_in)
  worker_list <- paste(workers, collapse = '" "')
  
  # Create the script content with the new logic for managing jobs
  script_content <- sprintf('#!/bin/bash

# variables
WORKERS=("%s")
TOTAL_LINES=$(wc -l < "%s")
CURRENT_LINE=1
MAX_JOBS_ALLOW=170  # maximum allowed jobs before waiting
WAIT_TIME=120  # wait time in seconds if jobs exceed the limit
RETRY_WAIT_TIME=60  # wait time if job submission fails due to MAX_JOBS_PER_OWNER

# get the number of running jobs on a specific worker
get_running_jobs() {
    local WORKER=$1
    condor_status -claimed | grep $WORKER | wc -l
}

# get the total number of claimed jobs across all workers
get_total_running_jobs() {
    condor_status -claimed | wc -l
}

# submit job to a specific worker and check if submission was successful
submit_job_to_worker() {
    local WORKER=$1
    local SUBMIT_RESULT=""
    sed -i "s/\\(requirements\\s*=\\s*(Machine == \\)\\"[^\\"]*\\"/\\1\\"$WORKER\\"/g" %s
    sed -i "/^Arguments\\s*=\\s*[0-9]\\+/s/[0-9]\\+/$CURRENT_LINE/" %s
    sed -i "s/_[0-9]\\+\\.txt/_${CURRENT_LINE}.txt/g" %s
    
    # Loop until condor_submit is successful
    while true; do
        SUBMIT_RESULT=$(condor_submit %s 2>&1)
        
        # Check if the submit was successful
        if echo "$SUBMIT_RESULT" | grep -q "Number of submitted jobs would exceed MAX_JOBS_PER_OWNER"; then
            echo "Job submission failed due to exceeding MAX_JOBS_PER_OWNER. Retrying in $RETRY_WAIT_TIME seconds..."
            sleep $RETRY_WAIT_TIME
        else
            echo "Job submitted successfully!"
            CURRENT_LINE=$((CURRENT_LINE+1))
            break
        fi
    done
}

cd %s

worker_buffer=0.5
slot_buffer=0.5

while [ $CURRENT_LINE -le $TOTAL_LINES ]; do
    # Check if total claimed jobs exceed or equal MAX_JOBS_ALLOW
    TOTAL_RUNNING_JOBS=$(get_total_running_jobs)
    
    if [ $TOTAL_RUNNING_JOBS -ge $MAX_JOBS_ALLOW ]; then
        echo "Total running jobs ($TOTAL_RUNNING_JOBS) have reached or exceeded the limit ($MAX_JOBS_ALLOW). Waiting for $WAIT_TIME seconds..."
        sleep $WAIT_TIME
    else
        for WORKER in "${WORKERS[@]}"; do
            RUNNING_JOBS=$(get_running_jobs $WORKER)
            
            while [ $RUNNING_JOBS -lt 30 ] && [ $CURRENT_LINE -le $TOTAL_LINES ]; do
                echo "${WORKER} is running ${RUNNING_JOBS} jobs"
                submit_job_to_worker $WORKER
                
                echo "Waiting ${worker_buffer} seconds ...."
                sleep $worker_buffer

                RUNNING_JOBS=$(get_running_jobs $WORKER)
                echo "-------------------------------------------------"
            done
        done
    fi
    echo "Checking in ${slot_buffer} seconds if slot available"
    sleep ${slot_buffer}
done

echo "All jobs submitted!"
', worker_list, tmp_cmd_file, submission_file, submission_file, submission_file, submission_file, output.dir)
  
  # Generate the script file
  script_file_name <- sprintf("%s/condor_scheduler_%s_%s.sh", output_path, state_code, calibration_label)
  writeLines(script_content, script_file_name)
  
  # Make the script executable
  system(paste0("chmod +x ", script_file_name))
  
  return(script_file_name)
}



write_submission_array_htcondor = function(experiment_supername_in,
                                           experiment_label_in,
                                           experiment_name_in,
                                           experiment_dir_in,
                                           synthetic_population_dir_in,
                                           params_base,
                                           job_base,
                                           reps, scalars, FUN, 
                                           cores_in         = 1, 
                                           walltime_in      = "0:45:00",
                                           fred_home_dir_in = "~/Coronavirus/FRED", 
                                           fred_results_in  = "~/Coronavirus/FRED_RESULTS",
                                           worker           = "worker4",
                                           workers          =  workers,
                                           output_path      = '../run_files') {
    print('submit array')    
    jobname = sprintf("%s-%s", experiment_supername_in, experiment_name_in)
    tmp_cmd_file = sprintf('tmp_execute_cmd_%s.txt', jobname)
    FUN(scalars, tmp_cmd_file, output_path)    
    cores_per_worker = cores_in
    submission_template = "
Universe                    = vanilla
Log                         = FRED_job_$(Cluster)_$(Process).log
Output                      = FRED_job_$(Cluster)_$(Process).out
Error                       = FRED_job_$(Cluster)_$(Process).err
Notification                = Error
Should_Transfer_Files       = Yes
Transfer_Executable         = True
Transfer_Input_Files        = ../job_executor_STATECODE_STAGELABEL.sh, ../TMPCMDFILE, EXPERIMENTDIR/community_timeseries_1.txt, EXPERIMENTDIR/covid_STATECODE_params_1.txt, EXPERIMENTDIR/facemask_compliance_timeseries_STATECODE_1.txt, EXPERIMENTDIR/initial_cases_STATECODE_1.txt,EXPERIMENTDIR/shelter_timeseries_STATECODE_1.txt, EXPERIMENTDIR/FRED_parameters.csv, EXPERIMENTDIR/FRED_parameters_limits.csv, EXPERIMENTDIR/infection_hospitalization_risk_5.csv, EXPERIMENTDIR/infection_hospitalization_risk.csv, EXPERIMENTDIR/geoinfo_municipios_colombia.csv, EXPERIMENTDIR/post_process_fred_calibration_var_0.R, EXPERIMENTDIR/post_process_fred_calibration_var_1.R, EXPERIMENTDIR/post_process_fred_calibration_var_2.R, EXPERIMENTDIR/post_process_fred_calibration_var_3.R, EXPERIMENTDIR/vaccination_daily_capacity_timeseries.txt, EXPERIMENTDIR/vaccination_stock_timeseries.txt
Transfer_Output_Files       = EXPERIMENTLABEL/FRED_RESULTS
Executable                  = ../job_executor_STATECODE_STAGELABEL.sh
When_To_Transfer_Output     = ON_EXIT_OR_EVICT
Arguments                   = 1
requirements                = (Machine == \"WORKERNAME\")
Queue JOBSPERWORKER
"
    submission_files = c()
    ##FREDHOMESTR, SYNPOPULATIONSDIR
    submission_str = submission_template %>%
        str_replace_all(pattern="JOBNAME", replacement = jobname) %>%
        str_replace_all(pattern="SYNPOPULATIONSDIR", replacement = synthetic_population_dir_in) %>%
        str_replace_all(pattern="EXPERIMENTDIR", replacement = experiment_dir_in) %>%
        str_replace_all(pattern="EXPERIMENTLABEL", replacement = experiment_label_in) %>%
        str_replace_all(pattern="STATECODE", replacement = as.character(state_code)) %>%
        str_replace_all(pattern="STAGELABEL", replacement = calibration_label) %>%
        str_replace_all(pattern="FREDHOMESTR", replacement = fred_home_dir_in) %>%
        str_replace_all(pattern="FREDRESULTSSTR", replacement = fred_results_in) %>%
        str_replace_all(pattern="JOBWALLTIME", replacement = walltime_in) %>%
        str_replace_all(pattern="JOBSPERWORKER", replacement = as.character(cores_per_worker)) %>%
        str_replace_all(pattern="PARAMSBASE", replacement = params_base) %>%
        str_replace_all(pattern="JOBBASE", replacement = job_base) %>%
        str_replace_all(pattern="REPS", replacement = as.character(reps)) %>%
        str_replace_all(pattern="TMPCMDFILE", replacement = tmp_cmd_file) %>%
        str_replace_all(pattern="JOBCORES", replacement = as.character(cores_in)) %>%
        str_replace_all(pattern="WORKERNAME", replacement = worker)

    submission_file = sprintf("%s/%s-%s.condor", output_path, experiment_supername_in, experiment_name_in)
    submission_files = c(submission_files, submission_file)
    file.connection = file(submission_file)
    write(submission_str, file.connection)
    system(sprintf("/bin/chmod a+x %s", submission_file))
    close(file.connection)
    
    write_condor_sh_execution_file(experiment_label_in = experiment_label_in, 
                                  jobs_queue           = cores_per_worker, 
                                  tmp_cmd_file         = tmp_cmd_file,
                                  state_code           = state_code,
                                  worker               = worker,
                                  output_path          = output_path)

    generate_condor_scheduler_script( experiment_supername_in = experiment_supername_in,
                                      experiment_name_in      = experiment_name_in,
                                      tmp_cmd_file            = tmp_cmd_file,
                                      experiment_label_in     = experiment_label_in,
                                      workers                 = workers,
                                      output_path             = output_path)

    return(submission_files)
}


write_submission_array_local = function(experiment_supername_in,
                                        experiment_name_in,
                                        experiment_dir_in,
                                        simulation_id, scalars, FUN,
                                        fred_home_dir_in="~/Coronavirus/FRED", 
                                        fred_results_in="~/Coronavirus/FRED_RESULTS",
                                        output_path = '../run_files'){
  print('submit array')    
  jobname = sprintf("%s-%s",experiment_supername_in, experiment_name_in)
  tmp_cmd_file = sprintf('tmp_execute_cmd_%s.txt',jobname)
  FUN(scalars, tmp_cmd_file)    
  n = nrow(scalars)
  submission_template = "#!/bin/bash
export FRED_HOME=FREDHOMESTR
export FRED_RESULTS=FREDRESULTSSTR
export PATH=${FRED_HOME}/bin:$PATH

file='TMPCMDFILE'
cmd=`head -n {ARRAY_TASK_ID} $file | tail -n 1`
cd EXPERIMENTDIR
eval $cmd
"    
  submission_str = submission_template %>%
    str_replace_all(pattern="EXPERIMENTDIR", replacement = experiment_dir_in) %>%
    str_replace_all(pattern="ARRAY_TASK_ID", replacement = simulation_id) %>%
    str_replace_all(pattern="FREDHOMESTR", replacement = fred_home_dir_in) %>%
    str_replace_all(pattern="FREDRESULTSSTR", replacement = fred_results_in) %>%
    str_replace_all(pattern="TMPCMDFILE", replacement = tmp_cmd_file) %>%
  
  submission_file = sprintf("%s/%s-%s.sh", output_path, experiment_supername_in, experiment_name_in)
  file.connection = file(submission_file)
  write(submission_str,file.connection)
  system(sprintf("/bin/chmod a+x %s/%s-%s.sh", output_path, experiment_supername_in, experiment_name_in))
  
  close(file.connection)
  return(submission_file)
}

##===============================================##
## Submit job function---------------
##===============================================##
submit_jobs = function(experiment_supername_in,
                       experiment_label_in,
                       experiment_name_in,
                       experiment_dir_in,
                       synthetic_population_dir_in,
                       params_base,
                       job_base,
                       reps, scalars,
                       FUN,
                       cores_in = 1,
                       delete_files = F,
                       sub_array = TRUE,
                       submit_job = TRUE,
                       workers = c("worker4"),
                       subsys = "HTCONDOR", walltime_in = "0:45:00",
                       fred_home_dir_in="~/Coronavirus/FRED",
                       fred_results_in="~/Coronavirus/FRED_RESULTS",
                       output_path = '../run_files'){
  if(sub_array == TRUE){
    if(subsys == "UGE"){
      submission_file           = write_submission_array(
        experiment_supername_in = experiment_supername_in,
        experiment_name_in      = experiment_name_in,
        experiment_dir_in       = experiment_dir_in,
        params_base             = params_base,
        job_base                = job_base,
        reps                    = reps, 
        scalars                 = scalars, 
        FUN                     = FUN,
        cores_in                = cores_in, 
        walltime_in             = walltime_in,
        fred_home_dir_in        = fred_home_dir_in, 
        fred_results_in         = fred_results_in)
    }else if(subsys == "PBS"){
      submission_file           = write_submission_array_pbs(
        experiment_supername_in = experiment_supername_in,
        experiment_name_in      = experiment_name_in,
        experiment_dir_in       = experiment_dir_in,
        params_base             = params_base,
        job_base                = job_base,
        reps                    = reps, 
        scalars                 = scalars, 
        FUN                     = FUN,
        cores_in                = cores_in, 
        walltime_in             = walltime_in,
        fred_home_dir_in        = fred_home_dir_in, 
        fred_results_in         = fred_results_in)
    }else if(subsys == "SLURM"){
      submission_file           = write_submission_array_slurm(
        experiment_supername_in = experiment_supername_in,
        experiment_name_in      = experiment_name_in,
        experiment_dir_in       = experiment_dir_in,
        params_base             = params_base,
        job_base                = job_base,
        reps                    = reps, 
        scalars                 = scalars, 
        FUN                     = FUN, 
        cores_in                = cores_in, 
        walltime_in             = walltime_in,
        fred_home_dir_in        = fred_home_dir_in, 
        fred_results_in         = fred_results_in,
        output_path             = output_path)
    }else if(subsys == "HTCONDOR"){
      submission_file           = write_submission_array_htcondor(
        experiment_supername_in = experiment_supername_in,
        experiment_label_in     = experiment_label_in,
        experiment_name_in      = experiment_name_in,
        experiment_dir_in       = experiment_dir_in,
        synthetic_population_dir_in = synthetic_population_dir_in,
        params_base             = params_base,
        job_base                = job_base,
        reps                    = reps, 
        scalars                 = scalars, 
        FUN                     = FUN, 
        cores_in                = cores_in, 
        workers                 = workers,
        worker                  = "worker4",
        walltime_in             = walltime_in,
        fred_home_dir_in        = fred_home_dir_in,
        fred_results_in         = fred_results_in,
        output_path             = output_path)
    }else if(subsys == "local"){
      submission_file           = write_submission_array_local(
        experiment_supername_in = experiment_supername_in,
        experiment_name_in      = experiment_name_in,
        experiment_dir_in       = experiment_dir_in,
        job_base                = job_base,
        simulation_id           = 1, 
        scalars                 = scalars, 
        FUN                     = FUN, 
        fred_home_dir_in        = fred_home_dir_in, 
        fred_results_in         = fred_results_in,
        output_path             = output_path)
    }
    if(submit_job){
      if(subsys == "UGE" | subsys == "UGE"){
        system(sprintf("qsub %s", submission_file))
      }else if(subsys == "SLURM"){
        system(sprintf("/usr/bin/sbatch %s", submission_file))
      }
    }
    if(delete_files == TRUE){
      unlink(submission_file)
    }   
  }
}

##===============================================##
## submit to CRC---------------
##===============================================##
fred_results_dir = file.path(output.dir,"FRED_RESULTS")
Sys.setenv(FRED_RESULTS=fred_results_dir)
if(!dir.exists(fred_results_dir)){
    dir.create(fred_results_dir)
}

submit_jobs(experiment_supername_in   = sprintf('FRED_CALIB-ASYMP-%.2fFM%.2f-KSUS%.2f-M-V%.0f-VX-%d',asymp_infectivity_in,face_mask_transmission_efficacy_in,kids_susceptibility_age_in, variants_in, vaccination_in),
            experiment_label_in       = experiment_label,
            experiment_name_in        = as.character(state_code),
            experiment_dir_in         = output.dir,
            synthetic_population_dir_in = populations_dir,
            params_base               = basename_params,
            job_base                  = basename_jobs,
            reps                      = reps_per_job,
            scalars                   = report_scalars,
            FUN                       = write_cmd_function,
            cores_in                  = 1,
            walltime_in               = "6:00:00",
            subsys                    = "HTCONDOR",
            submit_job                = subm_jobs,
            workers                   = workers,
            fred_home_dir_in          = fred_home, 
            fred_results_in           = fred_results_dir,
            output_path               = Sys.getenv('scratch_dir'))
